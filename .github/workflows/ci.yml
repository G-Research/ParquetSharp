name: CI

on:
  push:
    branches:
      - master
  pull_request:

jobs:

  # Note that vcpkg dependencies takes the majority of the build time.
  # We cache them using GitHub Actions cache and export, making the scripts below a bit more complex.

  # Build and test everything on Unix platorms.
  # Upload the native shared library as an artifact.
  native-unix:
    strategy:
      matrix:
        os: [ubuntu-18.04, macos-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.100
    - name: Resolve vcpkg version
      id: resolve-vcpkg-version
      run: echo "::set-output name=commit-id::$(git ls-remote $(cat vcpkg_version.txt) | cut -f1)"
    - name: Get cached vcpkg dependencies
      id: get-cached-vcpkg
      uses: actions/cache@v1
      with:
        path: cache/vcpkg
        key: vcpkg-${{ runner.os }}-${{ steps.resolve-vcpkg-version.outputs.commit-id }}
    - name: Use cached vcpkg dependencies
      if: steps.get-cached-vcpkg.outputs.cache-hit == 'true'
      run: |
        mkdir build
        mv cache/vcpkg build/vcpkg.$(echo ${{ runner.os }} | tr A-Z a-z)
    - name: Install vcpkg build dependencies (Linux)
      if: steps.get-cached-vcpkg.outputs.cache-hit != 'true' && runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get --yes install flex bison
    - name: Install vcpkg build dependencies (macOS)
      if: steps.get-cached-vcpkg.outputs.cache-hit != 'true' && runner.os == 'macOS'
      run: brew install bison
    - name: Compile vcpkg dependencies
      if: steps.get-cached-vcpkg.outputs.cache-hit != 'true'
      run: ./vcpkg_unix.sh
    - name: Cleanup vcpkg build
      if: steps.get-cached-vcpkg.outputs.cache-hit != 'true'
      run: rm -rf build/vcpkg.$(echo ${{ runner.os }} | tr A-Z a-z)/{buildtrees,downloads}
    - name: Export vcpkg dependencies
      if: steps.get-cached-vcpkg.outputs.cache-hit != 'true'
      run: build/vcpkg.$(echo ${{ runner.os }} | tr A-Z a-z)/vcpkg export --x-all-installed --raw --output=../../cache/vcpkg
    - name: Compile native ParquetSharp library
      run: ./build_unix.sh
    - name: Build & Run .NET unit tests
      run: dotnet test csharp.test --configuration=Release
    - name: Upload native ParquetSharp library
      uses: actions/upload-artifact@v1
      with:
        name: ${{ runner.os }}-native-library
        path: bin
         
  # Build and test everything on Windows.
  # Upload the native shared library as an artifact.
  native-windows:  
    runs-on: windows-latest    
    steps:
    - uses: actions/checkout@v2
    - name: Resolve vcpkg version
      id: resolve-vcpkg-version
      run: echo "::set-output name=commit-id::$(git ls-remote $(cat vcpkg_version.txt | %{ $_.Split() }) | %{ $_.Split()[0] })"
    - name: Get cached vcpkg dependencies
      id: get-cached-vcpkg
      uses: actions/cache@v1
      with:
        path: cache/vcpkg
        key: vcpkg-windows-${{ steps.resolve-vcpkg-version.outputs.commit-id }}
    - name: Use cached vcpkg dependencies
      if: steps.get-cached-vcpkg.outputs.cache-hit == 'true'
      run: |
        mkdir build
        mv cache\vcpkg build\vcpkg.windows
    - name: Compile vcpkg dependencies
      if: steps.get-cached-vcpkg.outputs.cache-hit != 'true'
      run: .\vcpkg_windows.bat
    - name: Cleanup vcpkg build
      if: steps.get-cached-vcpkg.outputs.cache-hit != 'true'
      run: '"buildtrees","downloads" | % { rm -r build\vcpkg.windows\$_ }'
    - name: Export vcpkg dependencies
      if: steps.get-cached-vcpkg.outputs.cache-hit != 'true'
      run: build\vcpkg.windows\vcpkg export --x-all-installed --raw --output=..\..\cache\vcpkg
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.0.0
    - name: Compile native ParquetSharp library
      run: .\build_windows.bat
    - name: Build & Run .NET unit tests
      run: dotnet test csharp.test --configuration=Release
    - name: Upload native ParquetSharp library
      uses: actions/upload-artifact@v1
      with:
        name: Windows-native-library
        path: bin/ParquetSharpNative.dll
        
  # Download all native shared libraries,
  # Rebuild .NET projects (will automatically pick up all libraries and create a nuget package).
  # Retest .NET unit tests to make sure the native library is fine.
  # Upload nuget package as an artifact.
  build-nuget:
    runs-on: windows-latest    
    needs: [native-unix, native-windows]
    steps:
    - uses: actions/checkout@v2
    - name: Download native ParquetSharp library (Linux)
      uses: actions/download-artifact@v1
      with:
        name: Linux-native-library
        path: bin
    - name: Download native ParquetSharp library (Windows)
      uses: actions/download-artifact@v1
      with:
        name: Windows-native-library
        path: bin
    - name: Download native ParquetSharp library (macOS)
      uses: actions/download-artifact@v1
      with:
        name: macOS-native-library
        path: bin
    - name: Build & Run .NET unit tests
      run: dotnet test csharp.test --configuration=Release
    - name: Build NuGet package
      run: dotnet pack csharp --configuration=Release
    - name: Upload NuGet artifact 
      uses: actions/upload-artifact@v1
      with:
        name: nuget-package
        path: nuget
