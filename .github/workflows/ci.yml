name: CI

on:
  push:
  pull_request:

env:
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_NOLOGO: true
  dotnet_3_version: '3.1.414'
  dotnet_5_version: '5.0.402'

jobs:

  # Note that vcpkg dependencies takes the majority of the build time.
  # We cache them using GitHub Actions cache and export, making the scripts below a bit more complex.
  check-format:
    if: github.event_name == 'push' || github.event.pull_request.head.repo.id != github.event.pull_request.base.repo.id
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.dotnet_5_version }} 
      - name: Code formating check
        run: |
          dotnet tool restore
          dotnet jb cleanupcode "csharp" "csharp.test" "csharp.benchmark" --profile="Built-in: Reformat Code" --settings="ParquetSharp.DotSettings" --dotnetcoresdk=${{ env.dotnet_5_version }} --verbosity=WARN

          files=($(git diff --name-only))
          if [ ${#files[@]} -gt 0 ]
          then
            for file in $files; do echo "::error file=$file::Code format check failed"; done
            exit 1
          fi

  # Build everything on all platorms (thus testing the developer workflow).
  # Upload the native shared libraries as artifacts.
  build-native:
    # Do not run this job for pull requests where both branches are from the same repo.
    # Other jobs will be skipped too, as they depend on this one.
    # This prevents duplicate CI runs for our own pull requests, whilst preserving the ability to
    # run the CI for each branch push to a fork, and for each pull request originating from a fork.
    if: github.event_name == 'push' || github.event.pull_request.head.repo.id != github.event.pull_request.base.repo.id
    strategy:
      matrix:
        os: [ubuntu-18.04, macos-latest, windows-latest]
      fail-fast: false
    name: Build native library (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      
    # Find out which vcpkg version we are using.
    - name: Resolve vcpkg version
      id: resolve-vcpkg-version
      run: |
        read -r vcpkg_url vcpkg_ref << EOF
        $(cat vcpkg_version.txt)
        EOF
        if [ ${#vcpkg_ref} -eq 40 ]; then commit_id=$vcpkg_ref; else commit_id=$(git ls-remote $vcpkg_url $vcpkg_ref | cut -f1); fi
        echo "::set-output name=commit-id::$commit_id"
      shell: bash
      
    # Check for cached vcpkg dependencies (use these if we can).
    - name: Get cached vcpkg dependencies
      id: get-cached-vcpkg
      uses: actions/cache@v1
      with:
        path: cache/vcpkg
        key: vcpkg-${{ runner.os }}-${{ steps.resolve-vcpkg-version.outputs.commit-id }}
    - name: Use cached vcpkg dependencies
      if: steps.get-cached-vcpkg.outputs.cache-hit == 'true'
      run: |
        mkdir build
        mv cache/vcpkg build/vcpkg.$(echo ${{ runner.os }})
      shell: bash
      
    # Build vcpkg dependencies (if no cach hit).
    - name: Install vcpkg build dependencies (Linux)
      if: steps.get-cached-vcpkg.outputs.cache-hit != 'true' && runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get --yes install flex bison
    - name: Install vcpkg build dependencies (macOS)
      if: steps.get-cached-vcpkg.outputs.cache-hit != 'true' && runner.os == 'macOS'
      run: brew install bison pkg-config
    - name: Compile vcpkg dependencies (Unix)
      if: steps.get-cached-vcpkg.outputs.cache-hit != 'true' && (runner.os == 'Linux' || runner.os == 'macOS')
      run: ./vcpkg_unix.sh
    - name: Compile vcpkg dependencies (Windows)
      if: steps.get-cached-vcpkg.outputs.cache-hit != 'true' && runner.os == 'Windows'
      run: ./vcpkg_windows.bat
    - name: Upload vcpkg arrow logs
      if: steps.get-cached-vcpkg.outputs.cache-hit != 'true' && (success() || failure())
      uses: actions/upload-artifact@v2
      with:
        name: ${{ runner.os }}-vcpkg-arrow-logs
        path: build/vcpkg.${{ runner.os }}/buildtrees/arrow/*.log
    - name: Cleanup vcpkg build
      if: steps.get-cached-vcpkg.outputs.cache-hit != 'true'
      run: rm -rf build/vcpkg.$(echo ${{ runner.os }} | tr A-Z a-z)/{buildtrees,downloads}
      shell: bash
    - name: Export vcpkg dependencies
      if: steps.get-cached-vcpkg.outputs.cache-hit != 'true'
      run: build/vcpkg.$(echo ${{ runner.os }})/vcpkg export --x-all-installed --raw --output=../../cache/vcpkg
      shell: bash
      
    # .NET Core Setup (and also MSBuild for Windows).
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.dotnet_3_version }}
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.dotnet_5_version }}
    - name: Pin .NET Core SDK
      run: dotnet new globaljson --sdk-version ${{ env.dotnet_5_version }}
    - name: Setup MSBuild
      if: runner.os == 'Windows'
      uses: microsoft/setup-msbuild@v1
      
    # Compile ParquetSharp (and upload the native library as an artifact).
    - name: Compile native ParquetSharp library (Unix)
      if: runner.os == 'Linux' || runner.os == 'macOS'
      run: ./build_unix.sh
    - name: Compile native ParquetSharp library (Windows)
      if: runner.os == 'Windows'
      run: ./build_windows.bat
    - name: Build .NET benchmarks & unit tests
      run: |
        dotnet build csharp.benchmark --configuration=Release
        dotnet build csharp.test --configuration=Release
    - name: Upload native ParquetSharp library
      uses: actions/upload-artifact@v2
      with:
        name: ${{ runner.os }}-native-library
        path: bin
        
  # Download all native shared libraries and create the nuget package.
  # Upload nuget package as an artifact.
  build-nuget:
    name: Build NuGet package
    runs-on: windows-latest    
    needs: build-native
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Download native ParquetSharp library (Linux)
      uses: actions/download-artifact@v2
      with:
        name: Linux-native-library
        path: bin
    - name: Download native ParquetSharp library (Windows)
      uses: actions/download-artifact@v2
      with:
        name: Windows-native-library
        path: bin
    - name: Download native ParquetSharp library (macOS)
      uses: actions/download-artifact@v2
      with:
        name: macOS-native-library
        path: bin
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.dotnet_5_version }}
    - name: Pin .NET Core SDK
      run: dotnet new globaljson --sdk-version ${{ env.dotnet_5_version }}
    - name: Build NuGet package
      run: dotnet build csharp --configuration=Release
    - name: Upload NuGet artifact 
      uses: actions/upload-artifact@v2
      with:
        name: nuget-package
        path: nuget

  # Run .NET unit tests with the nuget package on all platforms and all supported .NET runtimes (thus testing the user workflow).
  test-nuget:
    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04, macos-latest, windows-latest]
        dotnet: [3, 5]
        include:
        - os: windows-latest
          dotnet: 4
      fail-fast: false
    name: Test NuGet package (.NET ${{ matrix.dotnet }} on ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: build-nuget
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Get version
      id: get-version
      run: echo "::set-output name=version::$((Select-Xml -Path ./csharp/ParquetSharp.csproj -XPath '/Project/PropertyGroup/Version/text()').node.Value)"
      shell: pwsh
    - name: Download NuGet artifact
      uses: actions/download-artifact@v2
      with:
        name: nuget-package
        path: nuget
    - name: Create local NuGet feed (Unix)
      if: runner.os == 'Linux' || runner.os == 'macOS'
      run: |
        curl -sLO https://dist.nuget.org/win-x86-commandline/v5.5.1/nuget.exe
        mono nuget.exe add -source local nuget/ParquetSharp.${{ steps.get-version.outputs.version }}.nupkg
    - name: Create local NuGet feed (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install nuget.commandline
        nuget add -source local nuget/ParquetSharp.${{ steps.get-version.outputs.version }}.nupkg
    - name: Setup .NET variables
      id: dotnet
      shell: bash
      run: |
        major=${{ matrix.dotnet }}
        case $major in
          3)
            framework=netcoreapp3.1
            ;;
          4)
            framework=net472
            # We build for .NET framework with .NET Core 3.1 SDK
            major=3
            ;;
          5)
            framework=net5.0
            ;;
        esac
        version=dotnet_${major}_version
        echo "::set-output name=version::${!version}"
        echo "::set-output name=framework::$framework"
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ steps.dotnet.outputs.version }}
    - name: Pin .NET Core SDK
      run: dotnet new globaljson --sdk-version ${{ steps.dotnet.outputs.version }}
    - name: Add local NuGet feed
      run: dotnet nuget add source -n local $PWD/local
    - name: Change test project references to use local NuGet package
      run: |
        dotnet remove csharp.test reference csharp/ParquetSharp.csproj
        dotnet add csharp.test package ParquetSharp -v ${{ steps.get-version.outputs.version }}
    - name: Build & Run .NET unit tests
      run: dotnet test csharp.test --configuration=Release --framework ${{ steps.dotnet.outputs.framework }}

  # Virtual job that can be configured as a required check before a PR can be merged.
  all-required-checks-done:
    needs:
      - check-format
      - test-nuget
    runs-on: ubuntu-latest
    steps:
      - run: echo "All required checks done"

  # Create a GitHub release and publish the NuGet packages to nuget.org when a tag is pushed.
  publish-release:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && !github.event.repository.fork
    name: Publish release
    runs-on: ubuntu-latest
    needs: all-required-checks-done
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Check version
      id: check-version
      shell: pwsh
      run: |
        $version = (Select-Xml -Path ./csharp/ParquetSharp.csproj -XPath '/Project/PropertyGroup/Version/text()').node.Value
        $tag = "${{ github.ref }}".SubString(10)
        if (-not ($tag -eq $version)) {
          echo "::error ::There is a mismatch between the project version ($version) and the tag ($tag)"
          exit 1
        }
        echo "::set-output name=version::$version"
    - name: Download NuGet artifact
      uses: actions/download-artifact@v2
      with:
        name: nuget-package
        path: nuget
    # if version contains "-" treat it as pre-release
    # example: 1.0.0-beta1
    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        name: ParquetSharp ${{ steps.check-version.outputs.version }}
        draft: true
        prerelease: ${{ contains(steps.check-version.outputs.version, '-') }}
        files: |
          nuget/ParquetSharp.${{ steps.check-version.outputs.version }}.nupkg
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Publish to NuGet
      run: dotnet nuget push nuget/ParquetSharp.${{ steps.check-version.outputs.version }}.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
