#nullable enable
abstract ParquetSharp.AadPrefixVerifier.Verify(string! aadPrefix) -> void
abstract ParquetSharp.ColumnReader.Apply<TReturn>(ParquetSharp.IColumnReaderVisitor<TReturn>! visitor) -> TReturn
abstract ParquetSharp.ColumnReader.ElementType.get -> System.Type!
abstract ParquetSharp.ColumnReader.Skip(long numRowsToSkip) -> long
abstract ParquetSharp.ColumnWriter.Apply<TReturn>(ParquetSharp.IColumnWriterVisitor<TReturn>! visitor) -> TReturn
abstract ParquetSharp.ColumnWriter.ElementType.get -> System.Type!
abstract ParquetSharp.DecryptionKeyRetriever.GetKey(string! keyMetadata) -> byte[]!
abstract ParquetSharp.LogicalColumnReader.Apply<TReturn>(ParquetSharp.ILogicalColumnReaderVisitor<TReturn>! visitor) -> TReturn
abstract ParquetSharp.LogicalColumnReader.HasNext.get -> bool
abstract ParquetSharp.LogicalColumnReader.Skip(long numRowsToSkip) -> long
abstract ParquetSharp.LogicalColumnWriter.Apply<TReturn>(ParquetSharp.ILogicalColumnWriterVisitor<TReturn>! visitor) -> TReturn
abstract ParquetSharp.Schema.Node.DeepClone() -> ParquetSharp.Schema.Node!
abstract ParquetSharp.Statistics.MaxUntyped.get -> object!
abstract ParquetSharp.Statistics.MinUntyped.get -> object!
const ParquetSharp.LogicalRead.DateTimeOffset = 621355968000000000 -> long
const ParquetSharp.LogicalWrite.DateTimeOffset = 621355968000000000 -> long
override ParquetSharp.ApplicationVersion.ToString() -> string!
override ParquetSharp.ByteArray.Equals(object? obj) -> bool
override ParquetSharp.ByteArray.GetHashCode() -> int
override ParquetSharp.ByteArray.ToString() -> string!
override ParquetSharp.ColumnReader<TValue>.Apply<TReturn>(ParquetSharp.IColumnReaderVisitor<TReturn>! visitor) -> TReturn
override ParquetSharp.ColumnReader<TValue>.ElementType.get -> System.Type!
override ParquetSharp.ColumnReader<TValue>.Skip(long numRowsToSkip) -> long
override ParquetSharp.ColumnWriter<TValue>.Apply<TReturn>(ParquetSharp.IColumnWriterVisitor<TReturn>! visitor) -> TReturn
override ParquetSharp.ColumnWriter<TValue>.ElementType.get -> System.Type!
override ParquetSharp.Date.Equals(object? obj) -> bool
override ParquetSharp.Date.GetHashCode() -> int
override ParquetSharp.Date.ToString() -> string!
override ParquetSharp.DateTimeNanos.Equals(object? obj) -> bool
override ParquetSharp.DateTimeNanos.GetHashCode() -> int
override ParquetSharp.DateTimeNanos.ToString() -> string!
override ParquetSharp.FixedLenByteArray.Equals(object? obj) -> bool
override ParquetSharp.FixedLenByteArray.GetHashCode() -> int
override ParquetSharp.FixedLenByteArray.ToString() -> string!
override ParquetSharp.Int96.ToString() -> string!
override ParquetSharp.LogicalColumnReader<TElement>.Apply<TReturn>(ParquetSharp.ILogicalColumnReaderVisitor<TReturn>! visitor) -> TReturn
override ParquetSharp.LogicalColumnReader<TElement>.HasNext.get -> bool
override ParquetSharp.LogicalColumnReader<TElement>.Skip(long numRowsToSkip) -> long
override ParquetSharp.LogicalColumnWriter<TElement>.Apply<TReturn>(ParquetSharp.ILogicalColumnWriterVisitor<TReturn>! visitor) -> TReturn
override ParquetSharp.LogicalColumnWriter<TElement>.Dispose() -> void
override ParquetSharp.LogicalType.ToString() -> string!
override ParquetSharp.Schema.ColumnPath.ToString() -> string!
override ParquetSharp.Schema.GroupNode.DeepClone() -> ParquetSharp.Schema.Node!
override ParquetSharp.Schema.PrimitiveNode.DeepClone() -> ParquetSharp.Schema.Node!
override ParquetSharp.Statistics<TValue>.MaxUntyped.get -> object!
override ParquetSharp.Statistics<TValue>.MinUntyped.get -> object!
override ParquetSharp.TimeSpanNanos.ToString() -> string!
ParquetSharp.AadPrefixVerifier
ParquetSharp.AadPrefixVerifier.AadPrefixVerifier() -> void
ParquetSharp.ApplicationVersion
ParquetSharp.Arrow.ArrowReaderProperties
ParquetSharp.Arrow.ArrowReaderProperties.BatchSize.get -> long
ParquetSharp.Arrow.ArrowReaderProperties.BatchSize.set -> void
ParquetSharp.Arrow.ArrowReaderProperties.CoerceInt96TimestampUnit.get -> Apache.Arrow.Types.TimeUnit
ParquetSharp.Arrow.ArrowReaderProperties.CoerceInt96TimestampUnit.set -> void
ParquetSharp.Arrow.ArrowReaderProperties.Dispose() -> void
ParquetSharp.Arrow.ArrowReaderProperties.GetReadDictionary(int columnIndex) -> bool
ParquetSharp.Arrow.ArrowReaderProperties.PreBuffer.get -> bool
ParquetSharp.Arrow.ArrowReaderProperties.PreBuffer.set -> void
ParquetSharp.Arrow.ArrowReaderProperties.SetReadDictionary(int columnIndex, bool readDictionary) -> void
ParquetSharp.Arrow.ArrowReaderProperties.UseThreads.get -> bool
ParquetSharp.Arrow.ArrowReaderProperties.UseThreads.set -> void
ParquetSharp.Arrow.ArrowWriterProperties
ParquetSharp.Arrow.ArrowWriterProperties.CoerceTimestampsEnabled.get -> bool
ParquetSharp.Arrow.ArrowWriterProperties.CoerceTimestampsUnit.get -> Apache.Arrow.Types.TimeUnit
ParquetSharp.Arrow.ArrowWriterProperties.CompliantNestedTypes.get -> bool
ParquetSharp.Arrow.ArrowWriterProperties.Dispose() -> void
ParquetSharp.Arrow.ArrowWriterProperties.EngineVersion.get -> ParquetSharp.Arrow.ArrowWriterProperties.WriterEngineVersion
ParquetSharp.Arrow.ArrowWriterProperties.StoreSchema.get -> bool
ParquetSharp.Arrow.ArrowWriterProperties.TruncatedTimestampsAllowed.get -> bool
ParquetSharp.Arrow.ArrowWriterProperties.UseThreads.get -> bool
ParquetSharp.Arrow.ArrowWriterProperties.WriterEngineVersion
ParquetSharp.Arrow.ArrowWriterProperties.WriterEngineVersion.V1 = 0 -> ParquetSharp.Arrow.ArrowWriterProperties.WriterEngineVersion
ParquetSharp.Arrow.ArrowWriterProperties.WriterEngineVersion.V2 = 1 -> ParquetSharp.Arrow.ArrowWriterProperties.WriterEngineVersion
ParquetSharp.Arrow.ArrowWriterPropertiesBuilder
ParquetSharp.Arrow.ArrowWriterPropertiesBuilder.AllowTruncatedTimestamps() -> ParquetSharp.Arrow.ArrowWriterPropertiesBuilder!
ParquetSharp.Arrow.ArrowWriterPropertiesBuilder.ArrowWriterPropertiesBuilder() -> void
ParquetSharp.Arrow.ArrowWriterPropertiesBuilder.Build() -> ParquetSharp.Arrow.ArrowWriterProperties!
ParquetSharp.Arrow.ArrowWriterPropertiesBuilder.CoerceTimestamps(Apache.Arrow.Types.TimeUnit unit) -> ParquetSharp.Arrow.ArrowWriterPropertiesBuilder!
ParquetSharp.Arrow.ArrowWriterPropertiesBuilder.DisableCompliantNestedTypes() -> ParquetSharp.Arrow.ArrowWriterPropertiesBuilder!
ParquetSharp.Arrow.ArrowWriterPropertiesBuilder.DisallowTruncatedTimestamps() -> ParquetSharp.Arrow.ArrowWriterPropertiesBuilder!
ParquetSharp.Arrow.ArrowWriterPropertiesBuilder.Dispose() -> void
ParquetSharp.Arrow.ArrowWriterPropertiesBuilder.EnableCompliantNestedTypes() -> ParquetSharp.Arrow.ArrowWriterPropertiesBuilder!
ParquetSharp.Arrow.ArrowWriterPropertiesBuilder.EngineVersion(ParquetSharp.Arrow.ArrowWriterProperties.WriterEngineVersion version) -> ParquetSharp.Arrow.ArrowWriterPropertiesBuilder!
ParquetSharp.Arrow.ArrowWriterPropertiesBuilder.StoreSchema() -> ParquetSharp.Arrow.ArrowWriterPropertiesBuilder!
ParquetSharp.Arrow.ArrowWriterPropertiesBuilder.UseThreads(bool useThreads) -> ParquetSharp.Arrow.ArrowWriterPropertiesBuilder!
ParquetSharp.Arrow.FileReader
ParquetSharp.Arrow.FileReader.Dispose() -> void
ParquetSharp.Arrow.FileReader.FileReader(ParquetSharp.IO.RandomAccessFile! file, ParquetSharp.ReaderProperties? properties = null, ParquetSharp.Arrow.ArrowReaderProperties? arrowProperties = null) -> void
ParquetSharp.Arrow.FileReader.FileReader(string! path, ParquetSharp.ReaderProperties? properties = null, ParquetSharp.Arrow.ArrowReaderProperties? arrowProperties = null) -> void
ParquetSharp.Arrow.FileReader.FileReader(System.IO.Stream! stream, ParquetSharp.ReaderProperties? properties = null, ParquetSharp.Arrow.ArrowReaderProperties? arrowProperties = null, bool leaveOpen = false) -> void
ParquetSharp.Arrow.FileReader.GetRecordBatchReader(int[]? rowGroups = null, int[]? columns = null) -> Apache.Arrow.Ipc.IArrowArrayStream!
ParquetSharp.Arrow.FileReader.NumRowGroups.get -> int
ParquetSharp.Arrow.FileReader.ParquetReader.get -> ParquetSharp.ParquetFileReader!
ParquetSharp.Arrow.FileReader.Schema.get -> Apache.Arrow.Schema!
ParquetSharp.Arrow.FileReader.SchemaManifest.get -> ParquetSharp.Arrow.SchemaManifest!
ParquetSharp.Arrow.FileWriter
ParquetSharp.Arrow.FileWriter.Close() -> void
ParquetSharp.Arrow.FileWriter.Dispose() -> void
ParquetSharp.Arrow.FileWriter.FileWriter(ParquetSharp.IO.OutputStream! outputStream, Apache.Arrow.Schema! schema, ParquetSharp.WriterProperties? properties = null, ParquetSharp.Arrow.ArrowWriterProperties? arrowProperties = null) -> void
ParquetSharp.Arrow.FileWriter.FileWriter(string! path, Apache.Arrow.Schema! schema, ParquetSharp.WriterProperties? properties = null, ParquetSharp.Arrow.ArrowWriterProperties? arrowProperties = null) -> void
ParquetSharp.Arrow.FileWriter.FileWriter(System.IO.Stream! stream, Apache.Arrow.Schema! schema, ParquetSharp.WriterProperties? properties = null, ParquetSharp.Arrow.ArrowWriterProperties? arrowProperties = null, bool leaveOpen = false) -> void
ParquetSharp.Arrow.FileWriter.NewBufferedRowGroup() -> void
ParquetSharp.Arrow.FileWriter.NewRowGroup(long chunkSize) -> void
ParquetSharp.Arrow.FileWriter.Schema.get -> Apache.Arrow.Schema!
ParquetSharp.Arrow.FileWriter.WriteBufferedRecordBatch(Apache.Arrow.RecordBatch! recordBatch) -> void
ParquetSharp.Arrow.FileWriter.WriteColumnChunk(Apache.Arrow.ChunkedArray! array) -> void
ParquetSharp.Arrow.FileWriter.WriteColumnChunk(Apache.Arrow.IArrowArray! array) -> void
ParquetSharp.Arrow.FileWriter.WriteRecordBatch(Apache.Arrow.RecordBatch! recordBatch, long chunkSize = 1048576) -> void
ParquetSharp.Arrow.FileWriter.WriteTable(Apache.Arrow.Table! table, long chunkSize = 1048576) -> void
ParquetSharp.Arrow.SchemaField
ParquetSharp.Arrow.SchemaField.Children.get -> System.Collections.Generic.IReadOnlyList<ParquetSharp.Arrow.SchemaField!>!
ParquetSharp.Arrow.SchemaField.ColumnIndex.get -> int
ParquetSharp.Arrow.SchemaField.Field.get -> Apache.Arrow.Field!
ParquetSharp.Arrow.SchemaManifest
ParquetSharp.Arrow.SchemaManifest.GetColumnField(int columnIndex) -> ParquetSharp.Arrow.SchemaField!
ParquetSharp.Arrow.SchemaManifest.GetParent(ParquetSharp.Arrow.SchemaField! field) -> ParquetSharp.Arrow.SchemaField?
ParquetSharp.Arrow.SchemaManifest.SchemaField(int fieldIndex) -> ParquetSharp.Arrow.SchemaField!
ParquetSharp.Arrow.SchemaManifest.SchemaFields.get -> System.Collections.Generic.IReadOnlyList<ParquetSharp.Arrow.SchemaField!>!
ParquetSharp.BsonLogicalType
ParquetSharp.ByteArray
ParquetSharp.ByteArray.ByteArray() -> void
ParquetSharp.ByteArray.ByteArray(System.IntPtr pointer, int length) -> void
ParquetSharp.ByteArray.Equals(ParquetSharp.ByteArray other) -> bool
ParquetSharp.ByteArrayReaderCache<TPhysical, TLogical>
ParquetSharp.ByteArrayReaderCache<TPhysical, TLogical>.Add(TPhysical physical, TLogical logical) -> TLogical
ParquetSharp.ByteArrayReaderCache<TPhysical, TLogical>.ByteArrayReaderCache(ParquetSharp.ColumnChunkMetaData! columnChunkMetaData) -> void
ParquetSharp.ByteArrayReaderCache<TPhysical, TLogical>.Clear() -> void
ParquetSharp.ByteArrayReaderCache<TPhysical, TLogical>.GetScratchBuffer(int minLength) -> byte[]!
ParquetSharp.ByteArrayReaderCache<TPhysical, TLogical>.IsUsable.get -> bool
ParquetSharp.ByteArrayReaderCache<TPhysical, TLogical>.TryGetValue(TPhysical physical, out TLogical logical) -> bool
ParquetSharp.ByteBuffer
ParquetSharp.ByteBuffer.Allocate(int length) -> ParquetSharp.ByteArray
ParquetSharp.ByteBuffer.ByteBuffer(int blockSize) -> void
ParquetSharp.ByteBuffer.Clear() -> void
ParquetSharp.ByteBuffer.Dispose() -> void
ParquetSharp.Column
ParquetSharp.Column.Column(System.Type! logicalSystemType, string! name, ParquetSharp.LogicalType? logicalTypeOverride = null) -> void
ParquetSharp.Column.Column(System.Type! logicalSystemType, string! name, ParquetSharp.LogicalType? logicalTypeOverride, int length) -> void
ParquetSharp.Column.CreateSchemaNode() -> ParquetSharp.Schema.Node!
ParquetSharp.Column.CreateSchemaNode(ParquetSharp.LogicalTypeFactory! typeFactory) -> ParquetSharp.Schema.Node!
ParquetSharp.Column<TLogicalType>
ParquetSharp.Column<TLogicalType>.Column(string! name, ParquetSharp.LogicalType? logicalTypeOverride = null) -> void
ParquetSharp.ColumnChunkMetaData
ParquetSharp.ColumnChunkMetaData.Compression.get -> ParquetSharp.Compression
ParquetSharp.ColumnChunkMetaData.CryptoMetadata.get -> ParquetSharp.ColumnCryptoMetaData?
ParquetSharp.ColumnChunkMetaData.Dispose() -> void
ParquetSharp.ColumnChunkMetaData.Encodings.get -> ParquetSharp.Encoding[]!
ParquetSharp.ColumnChunkMetaData.FileOffset.get -> long
ParquetSharp.ColumnChunkMetaData.IsStatsSet.get -> bool
ParquetSharp.ColumnChunkMetaData.NumValues.get -> long
ParquetSharp.ColumnChunkMetaData.Statistics.get -> ParquetSharp.Statistics?
ParquetSharp.ColumnChunkMetaData.TotalCompressedSize.get -> long
ParquetSharp.ColumnChunkMetaData.TotalUncompressedSize.get -> long
ParquetSharp.ColumnChunkMetaData.Type.get -> ParquetSharp.PhysicalType
ParquetSharp.ColumnCryptoMetaData
ParquetSharp.ColumnCryptoMetaData.ColumnPath.get -> ParquetSharp.Schema.ColumnPath!
ParquetSharp.ColumnCryptoMetaData.Dispose() -> void
ParquetSharp.ColumnCryptoMetaData.EncryptedWithFooterKey.get -> bool
ParquetSharp.ColumnCryptoMetaData.KeyMetadata.get -> string!
ParquetSharp.ColumnDecryptionProperties
ParquetSharp.ColumnDecryptionProperties.ColumnPath.get -> string!
ParquetSharp.ColumnDecryptionProperties.DeepClone() -> ParquetSharp.ColumnDecryptionProperties!
ParquetSharp.ColumnDecryptionProperties.Dispose() -> void
ParquetSharp.ColumnDecryptionProperties.Key.get -> byte[]!
ParquetSharp.ColumnDecryptionPropertiesBuilder
ParquetSharp.ColumnDecryptionPropertiesBuilder.Build() -> ParquetSharp.ColumnDecryptionProperties!
ParquetSharp.ColumnDecryptionPropertiesBuilder.ColumnDecryptionPropertiesBuilder(ParquetSharp.Schema.ColumnPath! columnPath) -> void
ParquetSharp.ColumnDecryptionPropertiesBuilder.ColumnDecryptionPropertiesBuilder(string! columnName) -> void
ParquetSharp.ColumnDecryptionPropertiesBuilder.Dispose() -> void
ParquetSharp.ColumnDecryptionPropertiesBuilder.Key(byte[]! key) -> ParquetSharp.ColumnDecryptionPropertiesBuilder!
ParquetSharp.ColumnDescriptor
ParquetSharp.ColumnDescriptor.Apply<TReturn>(ParquetSharp.LogicalTypeFactory! typeFactory, ParquetSharp.IColumnDescriptorVisitor<TReturn>! visitor) -> TReturn
ParquetSharp.ColumnDescriptor.Apply<TReturn>(ParquetSharp.LogicalTypeFactory! typeFactory, System.Type? columnLogicalTypeOverride, bool useNesting, ParquetSharp.IColumnDescriptorVisitor<TReturn>! visitor) -> TReturn
ParquetSharp.ColumnDescriptor.Apply<TReturn>(ParquetSharp.LogicalTypeFactory! typeFactory, System.Type? columnLogicalTypeOverride, ParquetSharp.IColumnDescriptorVisitor<TReturn>! visitor) -> TReturn
ParquetSharp.ColumnDescriptor.ColumnOrder.get -> ParquetSharp.ColumnOrder
ParquetSharp.ColumnDescriptor.GetSystemTypes(ParquetSharp.LogicalTypeFactory! typeFactory, System.Type? columnLogicalTypeOverride) -> (System.Type! physicalType, System.Type! logicalType, System.Type! elementType)
ParquetSharp.ColumnDescriptor.GetSystemTypes(ParquetSharp.LogicalTypeFactory! typeFactory, System.Type? columnLogicalTypeOverride, bool useNesting) -> (System.Type! physicalType, System.Type! logicalType, System.Type! elementType)
ParquetSharp.ColumnDescriptor.LogicalType.get -> ParquetSharp.LogicalType!
ParquetSharp.ColumnDescriptor.MaxDefinitionLevel.get -> short
ParquetSharp.ColumnDescriptor.MaxRepetitionLevel.get -> short
ParquetSharp.ColumnDescriptor.Name.get -> string!
ParquetSharp.ColumnDescriptor.Path.get -> ParquetSharp.Schema.ColumnPath!
ParquetSharp.ColumnDescriptor.PhysicalType.get -> ParquetSharp.PhysicalType
ParquetSharp.ColumnDescriptor.SchemaNode.get -> ParquetSharp.Schema.Node!
ParquetSharp.ColumnDescriptor.SortOrder.get -> ParquetSharp.SortOrder
ParquetSharp.ColumnDescriptor.TypeLength.get -> int
ParquetSharp.ColumnDescriptor.TypePrecision.get -> int
ParquetSharp.ColumnDescriptor.TypeScale.get -> int
ParquetSharp.ColumnEncryptionProperties
ParquetSharp.ColumnEncryptionProperties.ColumnPath.get -> string!
ParquetSharp.ColumnEncryptionProperties.DeepClone() -> ParquetSharp.ColumnEncryptionProperties!
ParquetSharp.ColumnEncryptionProperties.Dispose() -> void
ParquetSharp.ColumnEncryptionProperties.IsEncrypted.get -> bool
ParquetSharp.ColumnEncryptionProperties.IsEncryptedWithFooterKey.get -> bool
ParquetSharp.ColumnEncryptionProperties.Key.get -> byte[]!
ParquetSharp.ColumnEncryptionProperties.KeyMetadata.get -> string!
ParquetSharp.ColumnEncryptionPropertiesBuilder
ParquetSharp.ColumnEncryptionPropertiesBuilder.Build() -> ParquetSharp.ColumnEncryptionProperties!
ParquetSharp.ColumnEncryptionPropertiesBuilder.ColumnEncryptionPropertiesBuilder(ParquetSharp.Schema.ColumnPath! columnPath) -> void
ParquetSharp.ColumnEncryptionPropertiesBuilder.ColumnEncryptionPropertiesBuilder(string! columnName) -> void
ParquetSharp.ColumnEncryptionPropertiesBuilder.Dispose() -> void
ParquetSharp.ColumnEncryptionPropertiesBuilder.Key(byte[]! key) -> ParquetSharp.ColumnEncryptionPropertiesBuilder!
ParquetSharp.ColumnEncryptionPropertiesBuilder.KeyId(string! keyId) -> ParquetSharp.ColumnEncryptionPropertiesBuilder!
ParquetSharp.ColumnEncryptionPropertiesBuilder.KeyMetadata(string! keyMetadata) -> ParquetSharp.ColumnEncryptionPropertiesBuilder!
ParquetSharp.ColumnOrder
ParquetSharp.ColumnOrder.TypeDefinedOrder = 1 -> ParquetSharp.ColumnOrder
ParquetSharp.ColumnOrder.Undefined = 0 -> ParquetSharp.ColumnOrder
ParquetSharp.ColumnReader
ParquetSharp.ColumnReader.ColumnDescriptor.get -> ParquetSharp.ColumnDescriptor!
ParquetSharp.ColumnReader.ColumnIndex.get -> int
ParquetSharp.ColumnReader.Dispose() -> void
ParquetSharp.ColumnReader.HasNext.get -> bool
ParquetSharp.ColumnReader.LogicalReadConverterFactory.get -> ParquetSharp.LogicalReadConverterFactory!
ParquetSharp.ColumnReader.LogicalReader(bool useNesting, int bufferLength = 4096) -> ParquetSharp.LogicalColumnReader!
ParquetSharp.ColumnReader.LogicalReader(int bufferLength = 4096) -> ParquetSharp.LogicalColumnReader!
ParquetSharp.ColumnReader.LogicalReader<TElement>(int bufferLength = 4096) -> ParquetSharp.LogicalColumnReader<TElement>!
ParquetSharp.ColumnReader.LogicalReaderOverride<TElement>(int bufferLength = 4096) -> ParquetSharp.LogicalColumnReader<TElement>!
ParquetSharp.ColumnReader.LogicalTypeFactory.get -> ParquetSharp.LogicalTypeFactory!
ParquetSharp.ColumnReader.Type.get -> ParquetSharp.PhysicalType
ParquetSharp.ColumnReader<TValue>
ParquetSharp.ColumnReader<TValue>.ReadBatch(long batchSize, System.Span<short> defLevels, System.Span<short> repLevels, System.Span<TValue> values, out long valuesRead) -> long
ParquetSharp.ColumnReader<TValue>.ReadBatch(long batchSize, System.Span<TValue> values, out long valuesRead) -> long
ParquetSharp.ColumnWriter
ParquetSharp.ColumnWriter.Close() -> long
ParquetSharp.ColumnWriter.ColumnDescriptor.get -> ParquetSharp.ColumnDescriptor!
ParquetSharp.ColumnWriter.ColumnIndex.get -> int
ParquetSharp.ColumnWriter.Dispose() -> void
ParquetSharp.ColumnWriter.LogicalTypeFactory.get -> ParquetSharp.LogicalTypeFactory!
ParquetSharp.ColumnWriter.LogicalWriteConverterFactory.get -> ParquetSharp.LogicalWriteConverterFactory!
ParquetSharp.ColumnWriter.LogicalWriter(int bufferLength = 4096) -> ParquetSharp.LogicalColumnWriter!
ParquetSharp.ColumnWriter.LogicalWriter<TElement>(int bufferLength = 4096) -> ParquetSharp.LogicalColumnWriter<TElement>!
ParquetSharp.ColumnWriter.LogicalWriterOverride<TElement>(int bufferLength = 4096) -> ParquetSharp.LogicalColumnWriter<TElement>!
ParquetSharp.ColumnWriter.RowWritten.get -> long
ParquetSharp.ColumnWriter.Type.get -> ParquetSharp.PhysicalType
ParquetSharp.ColumnWriter.WriterProperties.get -> ParquetSharp.WriterProperties!
ParquetSharp.ColumnWriter<TValue>
ParquetSharp.ColumnWriter<TValue>.WriteBatch(int numValues, System.ReadOnlySpan<short> defLevels, System.ReadOnlySpan<short> repLevels, System.ReadOnlySpan<TValue> values) -> void
ParquetSharp.ColumnWriter<TValue>.WriteBatch(System.ReadOnlySpan<TValue> values) -> void
ParquetSharp.ColumnWriter<TValue>.WriteBatchSpaced(int numValues, System.ReadOnlySpan<short> defLevels, System.ReadOnlySpan<short> repLevels, System.ReadOnlySpan<byte> validBits, long validBitsOffset, System.ReadOnlySpan<TValue> values) -> void
ParquetSharp.Compression
ParquetSharp.Compression.Brotli = 3 -> ParquetSharp.Compression
ParquetSharp.Compression.Bz2 = 8 -> ParquetSharp.Compression
ParquetSharp.Compression.Gzip = 2 -> ParquetSharp.Compression
ParquetSharp.Compression.Lz4 = 5 -> ParquetSharp.Compression
ParquetSharp.Compression.Lz4Frame = 6 -> ParquetSharp.Compression
ParquetSharp.Compression.Lz4Hadoop = 9 -> ParquetSharp.Compression
ParquetSharp.Compression.Lzo = 7 -> ParquetSharp.Compression
ParquetSharp.Compression.Snappy = 1 -> ParquetSharp.Compression
ParquetSharp.Compression.Uncompressed = 0 -> ParquetSharp.Compression
ParquetSharp.Compression.Zstd = 4 -> ParquetSharp.Compression
ParquetSharp.Date
ParquetSharp.Date.AddDays(int days) -> ParquetSharp.Date
ParquetSharp.Date.CompareTo(object? obj) -> int
ParquetSharp.Date.CompareTo(ParquetSharp.Date other) -> int
ParquetSharp.Date.Date() -> void
ParquetSharp.Date.Date(int days) -> void
ParquetSharp.Date.Date(int year, int month, int day) -> void
ParquetSharp.Date.Date(System.DateTime dateTime) -> void
ParquetSharp.Date.DateTime.get -> System.DateTime
ParquetSharp.Date.Equals(ParquetSharp.Date other) -> bool
ParquetSharp.DateLogicalType
ParquetSharp.DateTimeNanos
ParquetSharp.DateTimeNanos.CompareTo(object? obj) -> int
ParquetSharp.DateTimeNanos.CompareTo(ParquetSharp.DateTimeNanos other) -> int
ParquetSharp.DateTimeNanos.DateTime.get -> System.DateTime
ParquetSharp.DateTimeNanos.DateTimeNanos() -> void
ParquetSharp.DateTimeNanos.DateTimeNanos(long ticks) -> void
ParquetSharp.DateTimeNanos.DateTimeNanos(System.DateTime dateTime) -> void
ParquetSharp.DateTimeNanos.Equals(ParquetSharp.DateTimeNanos other) -> bool
ParquetSharp.DateTimeNanos.ToString(string? format, System.IFormatProvider? formatProvider = null) -> string!
ParquetSharp.DecimalLogicalType
ParquetSharp.DecimalLogicalType.Precision.get -> int
ParquetSharp.DecimalLogicalType.Scale.get -> int
ParquetSharp.DecryptionKeyRetriever
ParquetSharp.DecryptionKeyRetriever.DecryptionKeyRetriever() -> void
ParquetSharp.DefaultWriterProperties
ParquetSharp.Encoding
ParquetSharp.Encoding.BitPacked = 4 -> ParquetSharp.Encoding
ParquetSharp.Encoding.ByteStreamSplit = 9 -> ParquetSharp.Encoding
ParquetSharp.Encoding.DeltaBinaryPacked = 5 -> ParquetSharp.Encoding
ParquetSharp.Encoding.DeltaByteArray = 7 -> ParquetSharp.Encoding
ParquetSharp.Encoding.DeltaLengthByteArray = 6 -> ParquetSharp.Encoding
ParquetSharp.Encoding.Plain = 0 -> ParquetSharp.Encoding
ParquetSharp.Encoding.PlainDictionary = 2 -> ParquetSharp.Encoding
ParquetSharp.Encoding.Rle = 3 -> ParquetSharp.Encoding
ParquetSharp.Encoding.RleDictionary = 8 -> ParquetSharp.Encoding
ParquetSharp.Encoding.Undefined = 10 -> ParquetSharp.Encoding
ParquetSharp.Encoding.Unknown = 999 -> ParquetSharp.Encoding
ParquetSharp.Encryption.CryptoFactory
ParquetSharp.Encryption.CryptoFactory.CryptoFactory(ParquetSharp.Encryption.CryptoFactory.KmsClientFactory! kmsClientFactory) -> void
ParquetSharp.Encryption.CryptoFactory.Dispose() -> void
ParquetSharp.Encryption.CryptoFactory.GetFileDecryptionProperties(ParquetSharp.Encryption.KmsConnectionConfig! connectionConfig, ParquetSharp.Encryption.DecryptionConfiguration! decryptionConfig, string? filePath = null) -> ParquetSharp.FileDecryptionProperties!
ParquetSharp.Encryption.CryptoFactory.GetFileEncryptionProperties(ParquetSharp.Encryption.KmsConnectionConfig! connectionConfig, ParquetSharp.Encryption.EncryptionConfiguration! encryptionConfig, string? filePath = null) -> ParquetSharp.FileEncryptionProperties!
ParquetSharp.Encryption.CryptoFactory.KmsClientFactory
ParquetSharp.Encryption.CryptoFactory.RotateMasterKeys(ParquetSharp.Encryption.KmsConnectionConfig! connectionConfig, string! parquetFilePath, bool doubleWrapping, double cacheLifetimeSeconds = 600) -> void
ParquetSharp.Encryption.DecryptionConfiguration
ParquetSharp.Encryption.DecryptionConfiguration.CacheLifetimeSeconds.get -> double
ParquetSharp.Encryption.DecryptionConfiguration.CacheLifetimeSeconds.set -> void
ParquetSharp.Encryption.DecryptionConfiguration.DecryptionConfiguration() -> void
ParquetSharp.Encryption.DecryptionConfiguration.Dispose() -> void
ParquetSharp.Encryption.EncryptionConfiguration
ParquetSharp.Encryption.EncryptionConfiguration.CacheLifetimeSeconds.get -> double
ParquetSharp.Encryption.EncryptionConfiguration.CacheLifetimeSeconds.set -> void
ParquetSharp.Encryption.EncryptionConfiguration.ColumnKeys.get -> System.Collections.Generic.IReadOnlyDictionary<string!, System.Collections.Generic.IReadOnlyList<string!>!>!
ParquetSharp.Encryption.EncryptionConfiguration.ColumnKeys.set -> void
ParquetSharp.Encryption.EncryptionConfiguration.DataKeyLengthBits.get -> int
ParquetSharp.Encryption.EncryptionConfiguration.DataKeyLengthBits.set -> void
ParquetSharp.Encryption.EncryptionConfiguration.Dispose() -> void
ParquetSharp.Encryption.EncryptionConfiguration.DoubleWrapping.get -> bool
ParquetSharp.Encryption.EncryptionConfiguration.DoubleWrapping.set -> void
ParquetSharp.Encryption.EncryptionConfiguration.EncryptionAlgorithm.get -> ParquetSharp.ParquetCipher
ParquetSharp.Encryption.EncryptionConfiguration.EncryptionAlgorithm.set -> void
ParquetSharp.Encryption.EncryptionConfiguration.EncryptionConfiguration(string! footerKey) -> void
ParquetSharp.Encryption.EncryptionConfiguration.FooterKey.get -> string!
ParquetSharp.Encryption.EncryptionConfiguration.FooterKey.set -> void
ParquetSharp.Encryption.EncryptionConfiguration.InternalKeyMaterial.get -> bool
ParquetSharp.Encryption.EncryptionConfiguration.InternalKeyMaterial.set -> void
ParquetSharp.Encryption.EncryptionConfiguration.PlaintextFooter.get -> bool
ParquetSharp.Encryption.EncryptionConfiguration.PlaintextFooter.set -> void
ParquetSharp.Encryption.EncryptionConfiguration.UniformEncryption.get -> bool
ParquetSharp.Encryption.EncryptionConfiguration.UniformEncryption.set -> void
ParquetSharp.Encryption.IKmsClient
ParquetSharp.Encryption.IKmsClient.UnwrapKey(string! wrappedKey, string! masterKeyIdentifier) -> byte[]!
ParquetSharp.Encryption.IKmsClient.WrapKey(byte[]! keyBytes, string! masterKeyIdentifier) -> string!
ParquetSharp.Encryption.KmsConnectionConfig
ParquetSharp.Encryption.KmsConnectionConfig.CustomKmsConf.get -> System.Collections.Generic.IReadOnlyDictionary<string!, string!>!
ParquetSharp.Encryption.KmsConnectionConfig.CustomKmsConf.set -> void
ParquetSharp.Encryption.KmsConnectionConfig.Dispose() -> void
ParquetSharp.Encryption.KmsConnectionConfig.KeyAccessToken.get -> string!
ParquetSharp.Encryption.KmsConnectionConfig.KeyAccessToken.set -> void
ParquetSharp.Encryption.KmsConnectionConfig.KmsConnectionConfig() -> void
ParquetSharp.Encryption.KmsConnectionConfig.KmsInstanceId.get -> string!
ParquetSharp.Encryption.KmsConnectionConfig.KmsInstanceId.set -> void
ParquetSharp.Encryption.KmsConnectionConfig.KmsInstanceUrl.get -> string!
ParquetSharp.Encryption.KmsConnectionConfig.KmsInstanceUrl.set -> void
ParquetSharp.Encryption.KmsConnectionConfig.RefreshKeyAccessToken(string! newToken) -> void
ParquetSharp.Encryption.ReadonlyKmsConnectionConfig
ParquetSharp.Encryption.ReadonlyKmsConnectionConfig.CustomKmsConf.get -> System.Collections.Generic.IReadOnlyDictionary<string!, string!>!
ParquetSharp.Encryption.ReadonlyKmsConnectionConfig.KeyAccessToken.get -> string!
ParquetSharp.Encryption.ReadonlyKmsConnectionConfig.KmsInstanceId.get -> string!
ParquetSharp.Encryption.ReadonlyKmsConnectionConfig.KmsInstanceUrl.get -> string!
ParquetSharp.EnumLogicalType
ParquetSharp.FileDecryptionProperties
ParquetSharp.FileDecryptionProperties.AadPrefix.get -> string!
ParquetSharp.FileDecryptionProperties.AadPrefixVerifier.get -> ParquetSharp.AadPrefixVerifier?
ParquetSharp.FileDecryptionProperties.CheckPlaintextFooterIntegrity.get -> bool
ParquetSharp.FileDecryptionProperties.ColumnKey(string! columPath) -> byte[]!
ParquetSharp.FileDecryptionProperties.DeepClone() -> ParquetSharp.FileDecryptionProperties!
ParquetSharp.FileDecryptionProperties.Dispose() -> void
ParquetSharp.FileDecryptionProperties.FooterKey.get -> byte[]!
ParquetSharp.FileDecryptionProperties.KeyRetriever.get -> ParquetSharp.DecryptionKeyRetriever?
ParquetSharp.FileDecryptionProperties.PlaintextFilesAllowed.get -> bool
ParquetSharp.FileDecryptionPropertiesBuilder
ParquetSharp.FileDecryptionPropertiesBuilder.AadPrefix(string! aadPrefix) -> ParquetSharp.FileDecryptionPropertiesBuilder!
ParquetSharp.FileDecryptionPropertiesBuilder.AadPrefixVerifier(ParquetSharp.AadPrefixVerifier! aadPrefixVerifier) -> ParquetSharp.FileDecryptionPropertiesBuilder!
ParquetSharp.FileDecryptionPropertiesBuilder.Build() -> ParquetSharp.FileDecryptionProperties!
ParquetSharp.FileDecryptionPropertiesBuilder.ColumnKeys(ParquetSharp.ColumnDecryptionProperties![]! columnDecryptionProperties) -> ParquetSharp.FileDecryptionPropertiesBuilder!
ParquetSharp.FileDecryptionPropertiesBuilder.DisableFooterSignatureVerification() -> ParquetSharp.FileDecryptionPropertiesBuilder!
ParquetSharp.FileDecryptionPropertiesBuilder.Dispose() -> void
ParquetSharp.FileDecryptionPropertiesBuilder.FileDecryptionPropertiesBuilder() -> void
ParquetSharp.FileDecryptionPropertiesBuilder.FooterKey(byte[]! footerKey) -> ParquetSharp.FileDecryptionPropertiesBuilder!
ParquetSharp.FileDecryptionPropertiesBuilder.KeyRetriever(ParquetSharp.DecryptionKeyRetriever! keyRetriever) -> ParquetSharp.FileDecryptionPropertiesBuilder!
ParquetSharp.FileDecryptionPropertiesBuilder.PlaintextFilesAllowed() -> ParquetSharp.FileDecryptionPropertiesBuilder!
ParquetSharp.FileEncryptionProperties
ParquetSharp.FileEncryptionProperties.ColumnEncryptionProperties(string! columnPath) -> ParquetSharp.ColumnEncryptionProperties?
ParquetSharp.FileEncryptionProperties.DeepClone() -> ParquetSharp.FileEncryptionProperties!
ParquetSharp.FileEncryptionProperties.Dispose() -> void
ParquetSharp.FileEncryptionProperties.EncryptedFooter.get -> bool
ParquetSharp.FileEncryptionProperties.FileAad.get -> string!
ParquetSharp.FileEncryptionProperties.FooterKey.get -> byte[]!
ParquetSharp.FileEncryptionProperties.FooterKeyMetadata.get -> string!
ParquetSharp.FileEncryptionPropertiesBuilder
ParquetSharp.FileEncryptionPropertiesBuilder.AadPrefix(string! aadPrefix) -> ParquetSharp.FileEncryptionPropertiesBuilder!
ParquetSharp.FileEncryptionPropertiesBuilder.Algorithm(ParquetSharp.ParquetCipher parquetCipher) -> ParquetSharp.FileEncryptionPropertiesBuilder!
ParquetSharp.FileEncryptionPropertiesBuilder.Build() -> ParquetSharp.FileEncryptionProperties!
ParquetSharp.FileEncryptionPropertiesBuilder.DisableAadPrefixStorage() -> ParquetSharp.FileEncryptionPropertiesBuilder!
ParquetSharp.FileEncryptionPropertiesBuilder.Dispose() -> void
ParquetSharp.FileEncryptionPropertiesBuilder.EncryptedColumns(ParquetSharp.ColumnEncryptionProperties![]! columnEncryptionProperties) -> ParquetSharp.FileEncryptionPropertiesBuilder!
ParquetSharp.FileEncryptionPropertiesBuilder.FileEncryptionPropertiesBuilder(byte[]! footerKey) -> void
ParquetSharp.FileEncryptionPropertiesBuilder.FooterKeyId(string! footerKeyId) -> ParquetSharp.FileEncryptionPropertiesBuilder!
ParquetSharp.FileEncryptionPropertiesBuilder.FooterKeyMetadata(string! footerKeyMetadata) -> ParquetSharp.FileEncryptionPropertiesBuilder!
ParquetSharp.FileEncryptionPropertiesBuilder.SetPlaintextFooter() -> ParquetSharp.FileEncryptionPropertiesBuilder!
ParquetSharp.FileMetaData
ParquetSharp.FileMetaData.CreatedBy.get -> string!
ParquetSharp.FileMetaData.Dispose() -> void
ParquetSharp.FileMetaData.Equals(ParquetSharp.FileMetaData? other) -> bool
ParquetSharp.FileMetaData.KeyValueMetadata.get -> System.Collections.Generic.IReadOnlyDictionary<string!, string!>!
ParquetSharp.FileMetaData.NumColumns.get -> int
ParquetSharp.FileMetaData.NumRowGroups.get -> int
ParquetSharp.FileMetaData.NumRows.get -> long
ParquetSharp.FileMetaData.NumSchemaElements.get -> int
ParquetSharp.FileMetaData.Schema.get -> ParquetSharp.SchemaDescriptor!
ParquetSharp.FileMetaData.Size.get -> int
ParquetSharp.FileMetaData.Version.get -> ParquetSharp.ParquetVersion
ParquetSharp.FileMetaData.WriterVersion.get -> ParquetSharp.ApplicationVersion!
ParquetSharp.FixedLenByteArray
ParquetSharp.FixedLenByteArray.Equals(ParquetSharp.FixedLenByteArray other) -> bool
ParquetSharp.FixedLenByteArray.FixedLenByteArray() -> void
ParquetSharp.FixedLenByteArray.FixedLenByteArray(System.IntPtr pointer) -> void
ParquetSharp.Float16LogicalType
ParquetSharp.IColumnDescriptorVisitor<TReturn>
ParquetSharp.IColumnDescriptorVisitor<TReturn>.OnColumnDescriptor<TPhysical, TLogical, TElement>() -> TReturn
ParquetSharp.IColumnReaderVisitor<TReturn>
ParquetSharp.IColumnReaderVisitor<TReturn>.OnColumnReader<TValue>(ParquetSharp.ColumnReader<TValue>! columnReader) -> TReturn
ParquetSharp.IColumnWriterVisitor<TReturn>
ParquetSharp.IColumnWriterVisitor<TReturn>.OnColumnWriter<TValue>(ParquetSharp.ColumnWriter<TValue>! columnWriter) -> TReturn
ParquetSharp.ILogicalColumnReaderVisitor<TReturn>
ParquetSharp.ILogicalColumnReaderVisitor<TReturn>.OnLogicalColumnReader<TValue>(ParquetSharp.LogicalColumnReader<TValue>! columnReader) -> TReturn
ParquetSharp.ILogicalColumnWriterVisitor<TReturn>
ParquetSharp.ILogicalColumnWriterVisitor<TReturn>.OnLogicalColumnWriter<TValue>(ParquetSharp.LogicalColumnWriter<TValue>! columnWriter) -> TReturn
ParquetSharp.Int96
ParquetSharp.Int96.Equals(ParquetSharp.Int96 other) -> bool
ParquetSharp.Int96.Int96() -> void
ParquetSharp.Int96.Int96(int a, int b, int c) -> void
ParquetSharp.IntervalLogicalType
ParquetSharp.IntLogicalType
ParquetSharp.IntLogicalType.BitWidth.get -> int
ParquetSharp.IntLogicalType.IsSigned.get -> bool
ParquetSharp.IO.Buffer
ParquetSharp.IO.Buffer.Buffer(System.IntPtr data, long size) -> void
ParquetSharp.IO.Buffer.Capacity.get -> long
ParquetSharp.IO.Buffer.Data.get -> System.IntPtr
ParquetSharp.IO.Buffer.Dispose() -> void
ParquetSharp.IO.Buffer.MutableData.get -> System.IntPtr
ParquetSharp.IO.Buffer.Size.get -> long
ParquetSharp.IO.Buffer.ToArray() -> byte[]!
ParquetSharp.IO.BufferOutputStream
ParquetSharp.IO.BufferOutputStream.BufferOutputStream() -> void
ParquetSharp.IO.BufferOutputStream.BufferOutputStream(ParquetSharp.IO.ResizableBuffer! resizableBuffer) -> void
ParquetSharp.IO.BufferOutputStream.Finish() -> ParquetSharp.IO.Buffer!
ParquetSharp.IO.BufferReader
ParquetSharp.IO.BufferReader.BufferReader(ParquetSharp.IO.Buffer! buffer) -> void
ParquetSharp.IO.ManagedOutputStream
ParquetSharp.IO.ManagedOutputStream.ManagedOutputStream(System.IO.Stream! stream) -> void
ParquetSharp.IO.ManagedOutputStream.ManagedOutputStream(System.IO.Stream! stream, bool leaveOpen) -> void
ParquetSharp.IO.ManagedRandomAccessFile
ParquetSharp.IO.ManagedRandomAccessFile.ManagedRandomAccessFile(System.IO.Stream! stream) -> void
ParquetSharp.IO.ManagedRandomAccessFile.ManagedRandomAccessFile(System.IO.Stream! stream, bool leaveOpen) -> void
ParquetSharp.IO.OutputStream
ParquetSharp.IO.OutputStream.Dispose() -> void
ParquetSharp.IO.OutputStream.OutputStream() -> void
ParquetSharp.IO.OutputStream.OutputStream(System.IntPtr handle) -> void
ParquetSharp.IO.RandomAccessFile
ParquetSharp.IO.RandomAccessFile.Dispose() -> void
ParquetSharp.IO.RandomAccessFile.RandomAccessFile() -> void
ParquetSharp.IO.RandomAccessFile.RandomAccessFile(System.IntPtr handle) -> void
ParquetSharp.IO.ResizableBuffer
ParquetSharp.IO.ResizableBuffer.ResizableBuffer(long initialSize = 128) -> void
ParquetSharp.JsonLogicalType
ParquetSharp.ListLogicalType
ParquetSharp.LogicalColumnReader
ParquetSharp.LogicalColumnReader.LogicalColumnReader(ParquetSharp.ColumnReader! columnReader, int bufferLength) -> void
ParquetSharp.LogicalColumnReader<TElement>
ParquetSharp.LogicalColumnReader<TElement>.GetEnumerator() -> System.Collections.Generic.IEnumerator<TElement>!
ParquetSharp.LogicalColumnReader<TElement>.ReadAll(int rows) -> TElement[]!
ParquetSharp.LogicalColumnReader<TElement>.ReadBatch(System.Span<TElement> destination) -> int
ParquetSharp.LogicalColumnReader<TElement>.ReadBatch(TElement[]! destination, int start, int length) -> int
ParquetSharp.LogicalColumnStream<TSource>
ParquetSharp.LogicalColumnStream<TSource>.BufferLength.get -> int
ParquetSharp.LogicalColumnStream<TSource>.ColumnDescriptor.get -> ParquetSharp.ColumnDescriptor!
ParquetSharp.LogicalColumnStream<TSource>.LogicalColumnStream(TSource! source, ParquetSharp.ColumnDescriptor! descriptor, int bufferLength) -> void
ParquetSharp.LogicalColumnStream<TSource>.LogicalType.get -> ParquetSharp.LogicalType!
ParquetSharp.LogicalColumnStream<TSource>.Source.get -> TSource!
ParquetSharp.LogicalColumnWriter
ParquetSharp.LogicalColumnWriter.LogicalColumnWriter(ParquetSharp.ColumnWriter! columnWriter, int bufferLength) -> void
ParquetSharp.LogicalColumnWriter<TElement>
ParquetSharp.LogicalColumnWriter<TElement>.WriteBatch(System.ReadOnlySpan<TElement> values) -> void
ParquetSharp.LogicalColumnWriter<TElement>.WriteBatch(TElement[]! values) -> void
ParquetSharp.LogicalColumnWriter<TElement>.WriteBatch(TElement[]! values, int start, int length) -> void
ParquetSharp.LogicalRead
ParquetSharp.LogicalRead<TLogical, TPhysical>
ParquetSharp.LogicalRead<TLogical, TPhysical>.Converter
ParquetSharp.LogicalRead<TLogical, TPhysical>.DirectReader
ParquetSharp.LogicalReadConverterFactory
ParquetSharp.LogicalReadConverterFactory.LogicalReadConverterFactory() -> void
ParquetSharp.LogicalType
ParquetSharp.LogicalType.Dispose() -> void
ParquetSharp.LogicalType.Equals(ParquetSharp.LogicalType? other) -> bool
ParquetSharp.LogicalType.LogicalType(System.IntPtr handle) -> void
ParquetSharp.LogicalType.Type.get -> ParquetSharp.LogicalTypeEnum
ParquetSharp.LogicalTypeEnum
ParquetSharp.LogicalTypeEnum.Bson = 13 -> ParquetSharp.LogicalTypeEnum
ParquetSharp.LogicalTypeEnum.Date = 6 -> ParquetSharp.LogicalTypeEnum
ParquetSharp.LogicalTypeEnum.Decimal = 5 -> ParquetSharp.LogicalTypeEnum
ParquetSharp.LogicalTypeEnum.Enum = 4 -> ParquetSharp.LogicalTypeEnum
ParquetSharp.LogicalTypeEnum.Float16 = 16 -> ParquetSharp.LogicalTypeEnum
ParquetSharp.LogicalTypeEnum.Int = 10 -> ParquetSharp.LogicalTypeEnum
ParquetSharp.LogicalTypeEnum.Interval = 9 -> ParquetSharp.LogicalTypeEnum
ParquetSharp.LogicalTypeEnum.Json = 12 -> ParquetSharp.LogicalTypeEnum
ParquetSharp.LogicalTypeEnum.List = 3 -> ParquetSharp.LogicalTypeEnum
ParquetSharp.LogicalTypeEnum.Map = 2 -> ParquetSharp.LogicalTypeEnum
ParquetSharp.LogicalTypeEnum.Nil = 11 -> ParquetSharp.LogicalTypeEnum
ParquetSharp.LogicalTypeEnum.None = 15 -> ParquetSharp.LogicalTypeEnum
ParquetSharp.LogicalTypeEnum.String = 1 -> ParquetSharp.LogicalTypeEnum
ParquetSharp.LogicalTypeEnum.Time = 7 -> ParquetSharp.LogicalTypeEnum
ParquetSharp.LogicalTypeEnum.Timestamp = 8 -> ParquetSharp.LogicalTypeEnum
ParquetSharp.LogicalTypeEnum.Undefined = 0 -> ParquetSharp.LogicalTypeEnum
ParquetSharp.LogicalTypeEnum.Uuid = 14 -> ParquetSharp.LogicalTypeEnum
ParquetSharp.LogicalTypeFactory
ParquetSharp.LogicalTypeFactory.DateAsDateOnly.get -> bool
ParquetSharp.LogicalTypeFactory.DateAsDateOnly.set -> void
ParquetSharp.LogicalTypeFactory.LogicalTypeFactory() -> void
ParquetSharp.LogicalTypeFactory.LogicalTypeFactory(System.Collections.Generic.IReadOnlyDictionary<System.Type!, (ParquetSharp.LogicalType? logicalType, ParquetSharp.Repetition repetition, ParquetSharp.PhysicalType physicalType)>! primitiveMapping) -> void
ParquetSharp.LogicalTypeFactory.TimeAsTimeOnly.get -> bool
ParquetSharp.LogicalTypeFactory.TimeAsTimeOnly.set -> void
ParquetSharp.LogicalWrite
ParquetSharp.LogicalWrite<TLogical, TPhysical>
ParquetSharp.LogicalWrite<TLogical, TPhysical>.Converter
ParquetSharp.LogicalWriteConverterFactory
ParquetSharp.LogicalWriteConverterFactory.LogicalWriteConverterFactory() -> void
ParquetSharp.MapLogicalType
ParquetSharp.MemoryPool
ParquetSharp.MemoryPool.BackendName.get -> string!
ParquetSharp.MemoryPool.BytesAllocated.get -> long
ParquetSharp.MemoryPool.MaxMemory.get -> long
ParquetSharp.Nested<T>
ParquetSharp.Nested<T>.Nested() -> void
ParquetSharp.Nested<T>.Nested(T value) -> void
ParquetSharp.NoneLogicalType
ParquetSharp.NullLogicalType
ParquetSharp.ParquetCipher
ParquetSharp.ParquetCipher.AesGcmCtrV1 = 1 -> ParquetSharp.ParquetCipher
ParquetSharp.ParquetCipher.AesGcmV1 = 0 -> ParquetSharp.ParquetCipher
ParquetSharp.ParquetException
ParquetSharp.ParquetException.ParquetException(string! type, string! message) -> void
ParquetSharp.ParquetFileReader
ParquetSharp.ParquetFileReader.Close() -> void
ParquetSharp.ParquetFileReader.Dispose() -> void
ParquetSharp.ParquetFileReader.FileMetaData.get -> ParquetSharp.FileMetaData!
ParquetSharp.ParquetFileReader.LogicalReadConverterFactory.get -> ParquetSharp.LogicalReadConverterFactory!
ParquetSharp.ParquetFileReader.LogicalReadConverterFactory.set -> void
ParquetSharp.ParquetFileReader.LogicalTypeFactory.get -> ParquetSharp.LogicalTypeFactory!
ParquetSharp.ParquetFileReader.LogicalTypeFactory.set -> void
ParquetSharp.ParquetFileReader.ParquetFileReader(ParquetSharp.IO.RandomAccessFile! randomAccessFile) -> void
ParquetSharp.ParquetFileReader.ParquetFileReader(ParquetSharp.IO.RandomAccessFile! randomAccessFile, ParquetSharp.ReaderProperties? readerProperties) -> void
ParquetSharp.ParquetFileReader.ParquetFileReader(string! path) -> void
ParquetSharp.ParquetFileReader.ParquetFileReader(string! path, ParquetSharp.ReaderProperties? readerProperties) -> void
ParquetSharp.ParquetFileReader.ParquetFileReader(System.IO.Stream! stream, bool leaveOpen = false) -> void
ParquetSharp.ParquetFileReader.ParquetFileReader(System.IO.Stream! stream, ParquetSharp.ReaderProperties? readerProperties, bool leaveOpen = false) -> void
ParquetSharp.ParquetFileReader.RowGroup(int i) -> ParquetSharp.RowGroupReader!
ParquetSharp.ParquetFileWriter
ParquetSharp.ParquetFileWriter.AppendBufferedRowGroup() -> ParquetSharp.RowGroupWriter!
ParquetSharp.ParquetFileWriter.AppendRowGroup() -> ParquetSharp.RowGroupWriter!
ParquetSharp.ParquetFileWriter.Close() -> void
ParquetSharp.ParquetFileWriter.ColumnDescriptor(int i) -> ParquetSharp.ColumnDescriptor!
ParquetSharp.ParquetFileWriter.Dispose() -> void
ParquetSharp.ParquetFileWriter.FileMetaData.get -> ParquetSharp.FileMetaData?
ParquetSharp.ParquetFileWriter.KeyValueMetadata.get -> System.Collections.Generic.IReadOnlyDictionary<string!, string!>!
ParquetSharp.ParquetFileWriter.LogicalTypeFactory.get -> ParquetSharp.LogicalTypeFactory!
ParquetSharp.ParquetFileWriter.LogicalTypeFactory.set -> void
ParquetSharp.ParquetFileWriter.LogicalWriteConverterFactory.get -> ParquetSharp.LogicalWriteConverterFactory!
ParquetSharp.ParquetFileWriter.LogicalWriteConverterFactory.set -> void
ParquetSharp.ParquetFileWriter.ParquetFileWriter(ParquetSharp.IO.OutputStream! outputStream, ParquetSharp.Column![]! columns, ParquetSharp.Compression compression = ParquetSharp.Compression.Snappy, System.Collections.Generic.IReadOnlyDictionary<string!, string!>? keyValueMetadata = null) -> void
ParquetSharp.ParquetFileWriter.ParquetFileWriter(ParquetSharp.IO.OutputStream! outputStream, ParquetSharp.Column![]! columns, ParquetSharp.LogicalTypeFactory? logicalTypeFactory, ParquetSharp.Compression compression = ParquetSharp.Compression.Snappy, System.Collections.Generic.IReadOnlyDictionary<string!, string!>? keyValueMetadata = null) -> void
ParquetSharp.ParquetFileWriter.ParquetFileWriter(ParquetSharp.IO.OutputStream! outputStream, ParquetSharp.Column![]! columns, ParquetSharp.LogicalTypeFactory? logicalTypeFactory, ParquetSharp.WriterProperties! writerProperties, System.Collections.Generic.IReadOnlyDictionary<string!, string!>? keyValueMetadata = null) -> void
ParquetSharp.ParquetFileWriter.ParquetFileWriter(ParquetSharp.IO.OutputStream! outputStream, ParquetSharp.Column![]! columns, ParquetSharp.WriterProperties! writerProperties, System.Collections.Generic.IReadOnlyDictionary<string!, string!>? keyValueMetadata = null) -> void
ParquetSharp.ParquetFileWriter.ParquetFileWriter(ParquetSharp.IO.OutputStream! outputStream, ParquetSharp.Schema.GroupNode! schema, ParquetSharp.WriterProperties! writerProperties, System.Collections.Generic.IReadOnlyDictionary<string!, string!>? keyValueMetadata = null) -> void
ParquetSharp.ParquetFileWriter.ParquetFileWriter(string! path, ParquetSharp.Column![]! columns, ParquetSharp.Compression compression = ParquetSharp.Compression.Snappy, System.Collections.Generic.IReadOnlyDictionary<string!, string!>? keyValueMetadata = null) -> void
ParquetSharp.ParquetFileWriter.ParquetFileWriter(string! path, ParquetSharp.Column![]! columns, ParquetSharp.LogicalTypeFactory? logicalTypeFactory, ParquetSharp.Compression compression = ParquetSharp.Compression.Snappy, System.Collections.Generic.IReadOnlyDictionary<string!, string!>? keyValueMetadata = null) -> void
ParquetSharp.ParquetFileWriter.ParquetFileWriter(string! path, ParquetSharp.Column![]! columns, ParquetSharp.LogicalTypeFactory? logicalTypeFactory, ParquetSharp.WriterProperties! writerProperties, System.Collections.Generic.IReadOnlyDictionary<string!, string!>? keyValueMetadata = null) -> void
ParquetSharp.ParquetFileWriter.ParquetFileWriter(string! path, ParquetSharp.Column![]! columns, ParquetSharp.WriterProperties! writerProperties, System.Collections.Generic.IReadOnlyDictionary<string!, string!>? keyValueMetadata = null) -> void
ParquetSharp.ParquetFileWriter.ParquetFileWriter(string! path, ParquetSharp.Schema.GroupNode! schema, ParquetSharp.WriterProperties! writerProperties, System.Collections.Generic.IReadOnlyDictionary<string!, string!>? keyValueMetadata = null) -> void
ParquetSharp.ParquetFileWriter.ParquetFileWriter(System.IO.Stream! stream, ParquetSharp.Column![]! columns, ParquetSharp.LogicalTypeFactory? logicalTypeFactory = null, ParquetSharp.Compression compression = ParquetSharp.Compression.Snappy, System.Collections.Generic.IReadOnlyDictionary<string!, string!>? keyValueMetadata = null, bool leaveOpen = false) -> void
ParquetSharp.ParquetFileWriter.ParquetFileWriter(System.IO.Stream! stream, ParquetSharp.Column![]! columns, ParquetSharp.LogicalTypeFactory? logicalTypeFactory, ParquetSharp.WriterProperties! writerProperties, System.Collections.Generic.IReadOnlyDictionary<string!, string!>? keyValueMetadata = null, bool leaveOpen = false) -> void
ParquetSharp.ParquetFileWriter.ParquetFileWriter(System.IO.Stream! stream, ParquetSharp.Schema.GroupNode! schema, ParquetSharp.WriterProperties! writerProperties, System.Collections.Generic.IReadOnlyDictionary<string!, string!>? keyValueMetadata = null, bool leaveOpen = false) -> void
ParquetSharp.ParquetFileWriter.Schema.get -> ParquetSharp.SchemaDescriptor!
ParquetSharp.ParquetFileWriter.WriterProperties.get -> ParquetSharp.WriterProperties!
ParquetSharp.ParquetVersion
ParquetSharp.ParquetVersion.PARQUET_1_0 = 0 -> ParquetSharp.ParquetVersion
ParquetSharp.ParquetVersion.PARQUET_2_0 = 1 -> ParquetSharp.ParquetVersion
ParquetSharp.ParquetVersion.PARQUET_2_4 = 2 -> ParquetSharp.ParquetVersion
ParquetSharp.ParquetVersion.PARQUET_2_6 = 3 -> ParquetSharp.ParquetVersion
ParquetSharp.ParquetVersion.PARQUET_2_LATEST = 3 -> ParquetSharp.ParquetVersion
ParquetSharp.PhysicalType
ParquetSharp.PhysicalType.Boolean = 0 -> ParquetSharp.PhysicalType
ParquetSharp.PhysicalType.ByteArray = 6 -> ParquetSharp.PhysicalType
ParquetSharp.PhysicalType.Double = 5 -> ParquetSharp.PhysicalType
ParquetSharp.PhysicalType.FixedLenByteArray = 7 -> ParquetSharp.PhysicalType
ParquetSharp.PhysicalType.Float = 4 -> ParquetSharp.PhysicalType
ParquetSharp.PhysicalType.Int32 = 1 -> ParquetSharp.PhysicalType
ParquetSharp.PhysicalType.Int64 = 2 -> ParquetSharp.PhysicalType
ParquetSharp.PhysicalType.Int96 = 3 -> ParquetSharp.PhysicalType
ParquetSharp.PhysicalType.Undefined = 8 -> ParquetSharp.PhysicalType
ParquetSharp.ReaderProperties
ParquetSharp.ReaderProperties.BufferSize.get -> long
ParquetSharp.ReaderProperties.BufferSize.set -> void
ParquetSharp.ReaderProperties.DisableBufferedStream() -> void
ParquetSharp.ReaderProperties.DisablePageChecksumVerification() -> void
ParquetSharp.ReaderProperties.Dispose() -> void
ParquetSharp.ReaderProperties.EnableBufferedStream() -> void
ParquetSharp.ReaderProperties.EnablePageChecksumVerification() -> void
ParquetSharp.ReaderProperties.FileDecryptionProperties.get -> ParquetSharp.FileDecryptionProperties?
ParquetSharp.ReaderProperties.FileDecryptionProperties.set -> void
ParquetSharp.ReaderProperties.IsBufferedStreamEnabled.get -> bool
ParquetSharp.ReaderProperties.PageChecksumVerification.get -> bool
ParquetSharp.Repetition
ParquetSharp.Repetition.Optional = 1 -> ParquetSharp.Repetition
ParquetSharp.Repetition.Repeated = 2 -> ParquetSharp.Repetition
ParquetSharp.Repetition.Required = 0 -> ParquetSharp.Repetition
ParquetSharp.Repetition.Undefined = 3 -> ParquetSharp.Repetition
ParquetSharp.RowGroupMetaData
ParquetSharp.RowGroupMetaData.GetColumnChunkMetaData(int i) -> ParquetSharp.ColumnChunkMetaData!
ParquetSharp.RowGroupMetaData.NumColumns.get -> int
ParquetSharp.RowGroupMetaData.NumRows.get -> long
ParquetSharp.RowGroupMetaData.Schema.get -> ParquetSharp.SchemaDescriptor!
ParquetSharp.RowGroupMetaData.TotalByteSize.get -> long
ParquetSharp.RowGroupReader
ParquetSharp.RowGroupReader.Column(int i) -> ParquetSharp.ColumnReader!
ParquetSharp.RowGroupReader.Dispose() -> void
ParquetSharp.RowGroupReader.MetaData.get -> ParquetSharp.RowGroupMetaData!
ParquetSharp.RowGroupWriter
ParquetSharp.RowGroupWriter.Buffered.get -> bool
ParquetSharp.RowGroupWriter.Close() -> void
ParquetSharp.RowGroupWriter.Column(int i) -> ParquetSharp.ColumnWriter!
ParquetSharp.RowGroupWriter.CurrentColumn.get -> int
ParquetSharp.RowGroupWriter.Dispose() -> void
ParquetSharp.RowGroupWriter.NextColumn() -> ParquetSharp.ColumnWriter!
ParquetSharp.RowGroupWriter.NumColumns.get -> int
ParquetSharp.RowGroupWriter.NumRows.get -> long
ParquetSharp.RowGroupWriter.TotalBytesWritten.get -> long
ParquetSharp.RowGroupWriter.TotalCompressedBytes.get -> long
ParquetSharp.RowOriented.MapToColumnAttribute
ParquetSharp.RowOriented.MapToColumnAttribute.MapToColumnAttribute(string! columnName) -> void
ParquetSharp.RowOriented.ParquetDecimalScaleAttribute
ParquetSharp.RowOriented.ParquetDecimalScaleAttribute.ParquetDecimalScaleAttribute(int scale) -> void
ParquetSharp.RowOriented.ParquetFile
ParquetSharp.RowOriented.ParquetRowReader<TTuple>
ParquetSharp.RowOriented.ParquetRowReader<TTuple>.Dispose() -> void
ParquetSharp.RowOriented.ParquetRowReader<TTuple>.FileMetaData.get -> ParquetSharp.FileMetaData!
ParquetSharp.RowOriented.ParquetRowReader<TTuple>.ReadRows(int rowGroup) -> TTuple[]!
ParquetSharp.RowOriented.ParquetRowWriter<TTuple>
ParquetSharp.RowOriented.ParquetRowWriter<TTuple>.Close() -> void
ParquetSharp.RowOriented.ParquetRowWriter<TTuple>.ColumnDescriptor(int i) -> ParquetSharp.ColumnDescriptor!
ParquetSharp.RowOriented.ParquetRowWriter<TTuple>.Dispose() -> void
ParquetSharp.RowOriented.ParquetRowWriter<TTuple>.FileMetaData.get -> ParquetSharp.FileMetaData?
ParquetSharp.RowOriented.ParquetRowWriter<TTuple>.KeyValueMetadata.get -> System.Collections.Generic.IReadOnlyDictionary<string!, string!>!
ParquetSharp.RowOriented.ParquetRowWriter<TTuple>.Schema.get -> ParquetSharp.SchemaDescriptor!
ParquetSharp.RowOriented.ParquetRowWriter<TTuple>.StartNewRowGroup() -> void
ParquetSharp.RowOriented.ParquetRowWriter<TTuple>.WriteRow(TTuple row) -> void
ParquetSharp.RowOriented.ParquetRowWriter<TTuple>.WriteRows(System.Collections.Generic.IEnumerable<TTuple>! rows) -> void
ParquetSharp.RowOriented.ParquetRowWriter<TTuple>.WriteRowSpan(System.ReadOnlySpan<TTuple> rows) -> void
ParquetSharp.RowOriented.ParquetRowWriter<TTuple>.WriterProperties.get -> ParquetSharp.WriterProperties!
ParquetSharp.Schema.ColumnPath
ParquetSharp.Schema.ColumnPath.ColumnPath(ParquetSharp.Schema.Node! node) -> void
ParquetSharp.Schema.ColumnPath.ColumnPath(string! dotString) -> void
ParquetSharp.Schema.ColumnPath.ColumnPath(string![]! dotVector) -> void
ParquetSharp.Schema.ColumnPath.Dispose() -> void
ParquetSharp.Schema.ColumnPath.Extend(string! nodeName) -> ParquetSharp.Schema.ColumnPath!
ParquetSharp.Schema.ColumnPath.ToDotString() -> string!
ParquetSharp.Schema.ColumnPath.ToDotVector() -> string![]!
ParquetSharp.Schema.ConvertedType
ParquetSharp.Schema.ConvertedType.Bson = 21 -> ParquetSharp.Schema.ConvertedType
ParquetSharp.Schema.ConvertedType.Date = 7 -> ParquetSharp.Schema.ConvertedType
ParquetSharp.Schema.ConvertedType.Decimal = 6 -> ParquetSharp.Schema.ConvertedType
ParquetSharp.Schema.ConvertedType.Enum = 5 -> ParquetSharp.Schema.ConvertedType
ParquetSharp.Schema.ConvertedType.Int16 = 17 -> ParquetSharp.Schema.ConvertedType
ParquetSharp.Schema.ConvertedType.Int32 = 18 -> ParquetSharp.Schema.ConvertedType
ParquetSharp.Schema.ConvertedType.Int64 = 19 -> ParquetSharp.Schema.ConvertedType
ParquetSharp.Schema.ConvertedType.Int8 = 16 -> ParquetSharp.Schema.ConvertedType
ParquetSharp.Schema.ConvertedType.Interval = 22 -> ParquetSharp.Schema.ConvertedType
ParquetSharp.Schema.ConvertedType.Json = 20 -> ParquetSharp.Schema.ConvertedType
ParquetSharp.Schema.ConvertedType.List = 4 -> ParquetSharp.Schema.ConvertedType
ParquetSharp.Schema.ConvertedType.Map = 2 -> ParquetSharp.Schema.ConvertedType
ParquetSharp.Schema.ConvertedType.MapKeyValue = 3 -> ParquetSharp.Schema.ConvertedType
ParquetSharp.Schema.ConvertedType.NA = 25 -> ParquetSharp.Schema.ConvertedType
ParquetSharp.Schema.ConvertedType.None = 0 -> ParquetSharp.Schema.ConvertedType
ParquetSharp.Schema.ConvertedType.TimeMicros = 9 -> ParquetSharp.Schema.ConvertedType
ParquetSharp.Schema.ConvertedType.TimeMillis = 8 -> ParquetSharp.Schema.ConvertedType
ParquetSharp.Schema.ConvertedType.TimestampMicros = 11 -> ParquetSharp.Schema.ConvertedType
ParquetSharp.Schema.ConvertedType.TimestampMillis = 10 -> ParquetSharp.Schema.ConvertedType
ParquetSharp.Schema.ConvertedType.UInt16 = 13 -> ParquetSharp.Schema.ConvertedType
ParquetSharp.Schema.ConvertedType.UInt32 = 14 -> ParquetSharp.Schema.ConvertedType
ParquetSharp.Schema.ConvertedType.UInt64 = 15 -> ParquetSharp.Schema.ConvertedType
ParquetSharp.Schema.ConvertedType.UInt8 = 12 -> ParquetSharp.Schema.ConvertedType
ParquetSharp.Schema.ConvertedType.Undefined = 26 -> ParquetSharp.Schema.ConvertedType
ParquetSharp.Schema.ConvertedType.UTF8 = 1 -> ParquetSharp.Schema.ConvertedType
ParquetSharp.Schema.GroupNode
ParquetSharp.Schema.GroupNode.Field(int i) -> ParquetSharp.Schema.Node!
ParquetSharp.Schema.GroupNode.FieldCount.get -> int
ParquetSharp.Schema.GroupNode.FieldIndex(ParquetSharp.Schema.Node! node) -> int
ParquetSharp.Schema.GroupNode.FieldIndex(string! name) -> int
ParquetSharp.Schema.GroupNode.Fields.get -> ParquetSharp.Schema.Node![]!
ParquetSharp.Schema.GroupNode.GroupNode(string! name, ParquetSharp.Repetition repetition, System.Collections.Generic.IReadOnlyList<ParquetSharp.Schema.Node!>! fields, ParquetSharp.LogicalType? logicalType = null) -> void
ParquetSharp.Schema.Node
ParquetSharp.Schema.Node.ConvertedType.get -> ParquetSharp.Schema.ConvertedType
ParquetSharp.Schema.Node.Dispose() -> void
ParquetSharp.Schema.Node.Equals(ParquetSharp.Schema.Node? other) -> bool
ParquetSharp.Schema.Node.FieldId.get -> int
ParquetSharp.Schema.Node.LogicalType.get -> ParquetSharp.LogicalType!
ParquetSharp.Schema.Node.Name.get -> string!
ParquetSharp.Schema.Node.Node(System.IntPtr handle) -> void
ParquetSharp.Schema.Node.NodeType.get -> ParquetSharp.Schema.NodeType
ParquetSharp.Schema.Node.Parent.get -> ParquetSharp.Schema.Node?
ParquetSharp.Schema.Node.Path.get -> ParquetSharp.Schema.ColumnPath!
ParquetSharp.Schema.Node.Repetition.get -> ParquetSharp.Repetition
ParquetSharp.Schema.NodeType
ParquetSharp.Schema.NodeType.Group = 1 -> ParquetSharp.Schema.NodeType
ParquetSharp.Schema.NodeType.Primitive = 0 -> ParquetSharp.Schema.NodeType
ParquetSharp.Schema.PrimitiveNode
ParquetSharp.Schema.PrimitiveNode.ColumnOrder.get -> ParquetSharp.ColumnOrder
ParquetSharp.Schema.PrimitiveNode.PhysicalType.get -> ParquetSharp.PhysicalType
ParquetSharp.Schema.PrimitiveNode.PrimitiveNode(string! name, ParquetSharp.Repetition repetition, ParquetSharp.LogicalType! logicalType, ParquetSharp.PhysicalType physicalType, int primitiveLength = -1) -> void
ParquetSharp.Schema.PrimitiveNode.TypeLength.get -> int
ParquetSharp.SchemaDescriptor
ParquetSharp.SchemaDescriptor.Column(int i) -> ParquetSharp.ColumnDescriptor!
ParquetSharp.SchemaDescriptor.ColumnIndex(ParquetSharp.Schema.Node! node) -> int
ParquetSharp.SchemaDescriptor.ColumnIndex(string! path) -> int
ParquetSharp.SchemaDescriptor.ColumnRoot(int i) -> ParquetSharp.Schema.Node!
ParquetSharp.SchemaDescriptor.GroupNode.get -> ParquetSharp.Schema.GroupNode!
ParquetSharp.SchemaDescriptor.Name.get -> string!
ParquetSharp.SchemaDescriptor.NumColumns.get -> int
ParquetSharp.SchemaDescriptor.SchemaRoot.get -> ParquetSharp.Schema.Node!
ParquetSharp.SortOrder
ParquetSharp.SortOrder.Signed = 0 -> ParquetSharp.SortOrder
ParquetSharp.SortOrder.Unknown = 2 -> ParquetSharp.SortOrder
ParquetSharp.SortOrder.Unsigned = 1 -> ParquetSharp.SortOrder
ParquetSharp.Statistics
ParquetSharp.Statistics.Dispose() -> void
ParquetSharp.Statistics.DistinctCount.get -> long
ParquetSharp.Statistics.HasMinMax.get -> bool
ParquetSharp.Statistics.NullCount.get -> long
ParquetSharp.Statistics.NumValues.get -> long
ParquetSharp.Statistics.PhysicalType.get -> ParquetSharp.PhysicalType
ParquetSharp.Statistics<TValue>
ParquetSharp.Statistics<TValue>.Max.get -> TValue
ParquetSharp.Statistics<TValue>.Min.get -> TValue
ParquetSharp.StringLogicalType
ParquetSharp.TimeLogicalType
ParquetSharp.TimeLogicalType.IsAdjustedToUtc.get -> bool
ParquetSharp.TimeLogicalType.TimeUnit.get -> ParquetSharp.TimeUnit
ParquetSharp.TimeSpanNanos
ParquetSharp.TimeSpanNanos.Equals(ParquetSharp.TimeSpanNanos other) -> bool
ParquetSharp.TimeSpanNanos.TimeSpan.get -> System.TimeSpan
ParquetSharp.TimeSpanNanos.TimeSpanNanos() -> void
ParquetSharp.TimeSpanNanos.TimeSpanNanos(long ticks) -> void
ParquetSharp.TimeSpanNanos.TimeSpanNanos(System.TimeSpan timeSpan) -> void
ParquetSharp.TimestampLogicalType
ParquetSharp.TimestampLogicalType.ForceSetConvertedType.get -> bool
ParquetSharp.TimestampLogicalType.IsAdjustedToUtc.get -> bool
ParquetSharp.TimestampLogicalType.IsFromConvertedType.get -> bool
ParquetSharp.TimestampLogicalType.TimeUnit.get -> ParquetSharp.TimeUnit
ParquetSharp.TimeUnit
ParquetSharp.TimeUnit.Micros = 2 -> ParquetSharp.TimeUnit
ParquetSharp.TimeUnit.Millis = 1 -> ParquetSharp.TimeUnit
ParquetSharp.TimeUnit.Nanos = 3 -> ParquetSharp.TimeUnit
ParquetSharp.TimeUnit.Unknown = 0 -> ParquetSharp.TimeUnit
ParquetSharp.UuidLogicalType
ParquetSharp.WriterProperties
ParquetSharp.WriterProperties.Compression(ParquetSharp.Schema.ColumnPath! path) -> ParquetSharp.Compression
ParquetSharp.WriterProperties.CompressionLevel(ParquetSharp.Schema.ColumnPath! path) -> int
ParquetSharp.WriterProperties.CreatedBy.get -> string!
ParquetSharp.WriterProperties.DataPageSize.get -> long
ParquetSharp.WriterProperties.DictionaryEnabled(ParquetSharp.Schema.ColumnPath! path) -> bool
ParquetSharp.WriterProperties.DictionaryIndexEncoding.get -> ParquetSharp.Encoding
ParquetSharp.WriterProperties.DictionaryPageEncoding.get -> ParquetSharp.Encoding
ParquetSharp.WriterProperties.DictionaryPagesizeLimit.get -> long
ParquetSharp.WriterProperties.Dispose() -> void
ParquetSharp.WriterProperties.Encoding(ParquetSharp.Schema.ColumnPath! path) -> ParquetSharp.Encoding
ParquetSharp.WriterProperties.FileEncryptionProperties.get -> ParquetSharp.FileEncryptionProperties!
ParquetSharp.WriterProperties.MaxRowGroupLength.get -> long
ParquetSharp.WriterProperties.MaxStatisticsSize(ParquetSharp.Schema.ColumnPath! path) -> ulong
ParquetSharp.WriterProperties.PageChecksumEnabled.get -> bool
ParquetSharp.WriterProperties.StatisticsEnabled(ParquetSharp.Schema.ColumnPath! path) -> bool
ParquetSharp.WriterProperties.Version.get -> ParquetSharp.ParquetVersion
ParquetSharp.WriterProperties.WriteBatchSize.get -> long
ParquetSharp.WriterProperties.WritePageIndex.get -> bool
ParquetSharp.WriterProperties.WritePageIndexForPath(ParquetSharp.Schema.ColumnPath! path) -> bool
ParquetSharp.WriterPropertiesBuilder
ParquetSharp.WriterPropertiesBuilder.Build() -> ParquetSharp.WriterProperties!
ParquetSharp.WriterPropertiesBuilder.Compression(ParquetSharp.Compression codec) -> ParquetSharp.WriterPropertiesBuilder!
ParquetSharp.WriterPropertiesBuilder.Compression(ParquetSharp.Schema.ColumnPath! path, ParquetSharp.Compression codec) -> ParquetSharp.WriterPropertiesBuilder!
ParquetSharp.WriterPropertiesBuilder.Compression(string! path, ParquetSharp.Compression codec) -> ParquetSharp.WriterPropertiesBuilder!
ParquetSharp.WriterPropertiesBuilder.CompressionLevel(int compressionLevel) -> ParquetSharp.WriterPropertiesBuilder!
ParquetSharp.WriterPropertiesBuilder.CompressionLevel(ParquetSharp.Schema.ColumnPath! path, int compressionLevel) -> ParquetSharp.WriterPropertiesBuilder!
ParquetSharp.WriterPropertiesBuilder.CompressionLevel(string! path, int compressionLevel) -> ParquetSharp.WriterPropertiesBuilder!
ParquetSharp.WriterPropertiesBuilder.CreatedBy(string! createdBy) -> ParquetSharp.WriterPropertiesBuilder!
ParquetSharp.WriterPropertiesBuilder.DataPagesize(long pageSize) -> ParquetSharp.WriterPropertiesBuilder!
ParquetSharp.WriterPropertiesBuilder.DictionaryPagesizeLimit(long dictionaryPagesizeLimit) -> ParquetSharp.WriterPropertiesBuilder!
ParquetSharp.WriterPropertiesBuilder.DisableDictionary() -> ParquetSharp.WriterPropertiesBuilder!
ParquetSharp.WriterPropertiesBuilder.DisableDictionary(ParquetSharp.Schema.ColumnPath! path) -> ParquetSharp.WriterPropertiesBuilder!
ParquetSharp.WriterPropertiesBuilder.DisableDictionary(string! path) -> ParquetSharp.WriterPropertiesBuilder!
ParquetSharp.WriterPropertiesBuilder.DisablePageChecksum() -> ParquetSharp.WriterPropertiesBuilder!
ParquetSharp.WriterPropertiesBuilder.DisableStatistics() -> ParquetSharp.WriterPropertiesBuilder!
ParquetSharp.WriterPropertiesBuilder.DisableStatistics(ParquetSharp.Schema.ColumnPath! path) -> ParquetSharp.WriterPropertiesBuilder!
ParquetSharp.WriterPropertiesBuilder.DisableStatistics(string! path) -> ParquetSharp.WriterPropertiesBuilder!
ParquetSharp.WriterPropertiesBuilder.DisableWritePageIndex() -> ParquetSharp.WriterPropertiesBuilder!
ParquetSharp.WriterPropertiesBuilder.DisableWritePageIndex(ParquetSharp.Schema.ColumnPath! path) -> ParquetSharp.WriterPropertiesBuilder!
ParquetSharp.WriterPropertiesBuilder.DisableWritePageIndex(string! path) -> ParquetSharp.WriterPropertiesBuilder!
ParquetSharp.WriterPropertiesBuilder.Dispose() -> void
ParquetSharp.WriterPropertiesBuilder.EnableDictionary() -> ParquetSharp.WriterPropertiesBuilder!
ParquetSharp.WriterPropertiesBuilder.EnableDictionary(ParquetSharp.Schema.ColumnPath! path) -> ParquetSharp.WriterPropertiesBuilder!
ParquetSharp.WriterPropertiesBuilder.EnableDictionary(string! path) -> ParquetSharp.WriterPropertiesBuilder!
ParquetSharp.WriterPropertiesBuilder.EnablePageChecksum() -> ParquetSharp.WriterPropertiesBuilder!
ParquetSharp.WriterPropertiesBuilder.EnableStatistics() -> ParquetSharp.WriterPropertiesBuilder!
ParquetSharp.WriterPropertiesBuilder.EnableStatistics(ParquetSharp.Schema.ColumnPath! path) -> ParquetSharp.WriterPropertiesBuilder!
ParquetSharp.WriterPropertiesBuilder.EnableStatistics(string! path) -> ParquetSharp.WriterPropertiesBuilder!
ParquetSharp.WriterPropertiesBuilder.EnableWritePageIndex() -> ParquetSharp.WriterPropertiesBuilder!
ParquetSharp.WriterPropertiesBuilder.EnableWritePageIndex(ParquetSharp.Schema.ColumnPath! path) -> ParquetSharp.WriterPropertiesBuilder!
ParquetSharp.WriterPropertiesBuilder.EnableWritePageIndex(string! path) -> ParquetSharp.WriterPropertiesBuilder!
ParquetSharp.WriterPropertiesBuilder.Encoding(ParquetSharp.Encoding encoding) -> ParquetSharp.WriterPropertiesBuilder!
ParquetSharp.WriterPropertiesBuilder.Encoding(ParquetSharp.Schema.ColumnPath! path, ParquetSharp.Encoding encoding) -> ParquetSharp.WriterPropertiesBuilder!
ParquetSharp.WriterPropertiesBuilder.Encoding(string! path, ParquetSharp.Encoding encoding) -> ParquetSharp.WriterPropertiesBuilder!
ParquetSharp.WriterPropertiesBuilder.Encryption(ParquetSharp.FileEncryptionProperties? fileEncryptionProperties) -> ParquetSharp.WriterPropertiesBuilder!
ParquetSharp.WriterPropertiesBuilder.MaxRowGroupLength(long maxRowGroupLength) -> ParquetSharp.WriterPropertiesBuilder!
ParquetSharp.WriterPropertiesBuilder.Version(ParquetSharp.ParquetVersion version) -> ParquetSharp.WriterPropertiesBuilder!
ParquetSharp.WriterPropertiesBuilder.WriteBatchSize(long writeBatchSize) -> ParquetSharp.WriterPropertiesBuilder!
ParquetSharp.WriterPropertiesBuilder.WriterPropertiesBuilder() -> void
readonly ParquetSharp.ApplicationVersion.Application -> string!
readonly ParquetSharp.ApplicationVersion.Build -> string!
readonly ParquetSharp.ApplicationVersion.BuildInfo -> string!
readonly ParquetSharp.ApplicationVersion.Major -> int
readonly ParquetSharp.ApplicationVersion.Minor -> int
readonly ParquetSharp.ApplicationVersion.Patch -> int
readonly ParquetSharp.ApplicationVersion.PreRelease -> string!
readonly ParquetSharp.ApplicationVersion.Unknown -> string!
readonly ParquetSharp.ByteArray.Length -> int
readonly ParquetSharp.ByteArray.Pointer -> System.IntPtr
readonly ParquetSharp.Column.Length -> int
readonly ParquetSharp.Column.LogicalSystemType -> System.Type!
readonly ParquetSharp.Column.LogicalTypeOverride -> ParquetSharp.LogicalType?
readonly ParquetSharp.Column.Name -> string!
readonly ParquetSharp.Date.Days -> int
readonly ParquetSharp.DateTimeNanos.Ticks -> long
readonly ParquetSharp.FixedLenByteArray.Pointer -> System.IntPtr
readonly ParquetSharp.Int96.A -> int
readonly ParquetSharp.Int96.B -> int
readonly ParquetSharp.Int96.C -> int
readonly ParquetSharp.Nested<T>.Value -> T
readonly ParquetSharp.RowOriented.MapToColumnAttribute.ColumnName -> string!
readonly ParquetSharp.RowOriented.ParquetDecimalScaleAttribute.Scale -> int
readonly ParquetSharp.TimeSpanNanos.Ticks -> long
static ParquetSharp.Arrow.ArrowReaderProperties.GetDefault() -> ParquetSharp.Arrow.ArrowReaderProperties!
static ParquetSharp.Arrow.ArrowWriterProperties.GetDefault() -> ParquetSharp.Arrow.ArrowWriterProperties!
static ParquetSharp.Column.CreateSchemaNode(ParquetSharp.Column![]! columns, ParquetSharp.LogicalTypeFactory! logicalTypeFactory, string! nodeName = "schema") -> ParquetSharp.Schema.GroupNode!
static ParquetSharp.Column.CreateSchemaNode(ParquetSharp.Column![]! columns, string! nodeName = "schema") -> ParquetSharp.Schema.GroupNode!
static ParquetSharp.DateTimeNanos.FromDotnetTicks(long dotnetTicks) -> ParquetSharp.DateTimeNanos
static ParquetSharp.DateTimeNanos.operator !=(ParquetSharp.DateTimeNanos left, ParquetSharp.DateTimeNanos right) -> bool
static ParquetSharp.DateTimeNanos.operator <(ParquetSharp.DateTimeNanos left, ParquetSharp.DateTimeNanos right) -> bool
static ParquetSharp.DateTimeNanos.operator <=(ParquetSharp.DateTimeNanos left, ParquetSharp.DateTimeNanos right) -> bool
static ParquetSharp.DateTimeNanos.operator ==(ParquetSharp.DateTimeNanos left, ParquetSharp.DateTimeNanos right) -> bool
static ParquetSharp.DateTimeNanos.operator >(ParquetSharp.DateTimeNanos left, ParquetSharp.DateTimeNanos right) -> bool
static ParquetSharp.DateTimeNanos.operator >=(ParquetSharp.DateTimeNanos left, ParquetSharp.DateTimeNanos right) -> bool
static ParquetSharp.DefaultWriterProperties.Compression.get -> ParquetSharp.Compression?
static ParquetSharp.DefaultWriterProperties.Compression.set -> void
static ParquetSharp.DefaultWriterProperties.CompressionLevel.get -> int?
static ParquetSharp.DefaultWriterProperties.CompressionLevel.set -> void
static ParquetSharp.DefaultWriterProperties.CreatedBy.get -> string?
static ParquetSharp.DefaultWriterProperties.CreatedBy.set -> void
static ParquetSharp.DefaultWriterProperties.DataPagesize.get -> long?
static ParquetSharp.DefaultWriterProperties.DataPagesize.set -> void
static ParquetSharp.DefaultWriterProperties.DictionaryPagesizeLimit.get -> long?
static ParquetSharp.DefaultWriterProperties.DictionaryPagesizeLimit.set -> void
static ParquetSharp.DefaultWriterProperties.EnableDictionary.get -> bool?
static ParquetSharp.DefaultWriterProperties.EnableDictionary.set -> void
static ParquetSharp.DefaultWriterProperties.EnableStatistics.get -> bool?
static ParquetSharp.DefaultWriterProperties.EnableStatistics.set -> void
static ParquetSharp.DefaultWriterProperties.Encoding.get -> ParquetSharp.Encoding?
static ParquetSharp.DefaultWriterProperties.Encoding.set -> void
static ParquetSharp.DefaultWriterProperties.MaxRowGroupLength.get -> long?
static ParquetSharp.DefaultWriterProperties.MaxRowGroupLength.set -> void
static ParquetSharp.DefaultWriterProperties.PageChecksumEnabled.get -> bool?
static ParquetSharp.DefaultWriterProperties.PageChecksumEnabled.set -> void
static ParquetSharp.DefaultWriterProperties.Version.get -> ParquetSharp.ParquetVersion?
static ParquetSharp.DefaultWriterProperties.Version.set -> void
static ParquetSharp.DefaultWriterProperties.WriteBatchSize.get -> long?
static ParquetSharp.DefaultWriterProperties.WriteBatchSize.set -> void
static ParquetSharp.DefaultWriterProperties.WritePageIndex.get -> bool?
static ParquetSharp.DefaultWriterProperties.WritePageIndex.set -> void
static ParquetSharp.LogicalColumnStream<TSource>.GetLeafElementType(System.Type? type) -> System.Type?
static ParquetSharp.LogicalColumnStream<TSource>.GetSchemaNodesPath(ParquetSharp.Schema.Node! node) -> ParquetSharp.Schema.Node![]!
static ParquetSharp.LogicalRead.ConvertByteArray(System.ReadOnlySpan<ParquetSharp.ByteArray> source, System.ReadOnlySpan<short> defLevels, System.Span<byte[]?> destination, short definedLevel) -> void
static ParquetSharp.LogicalRead.ConvertDateOnly(System.ReadOnlySpan<int> source, System.ReadOnlySpan<short> defLevels, System.Span<System.DateOnly?> destination, short definedLevel) -> void
static ParquetSharp.LogicalRead.ConvertDateOnly(System.ReadOnlySpan<int> source, System.Span<System.DateOnly> destination) -> void
static ParquetSharp.LogicalRead.ConvertDateTimeMicros(System.ReadOnlySpan<long> source, System.ReadOnlySpan<short> defLevels, System.Span<System.DateTime?> destination, short definedLevel, System.DateTimeKind kind = System.DateTimeKind.Unspecified) -> void
static ParquetSharp.LogicalRead.ConvertDateTimeMicros(System.ReadOnlySpan<long> source, System.Span<System.DateTime> destination, System.DateTimeKind kind = System.DateTimeKind.Unspecified) -> void
static ParquetSharp.LogicalRead.ConvertDateTimeMillis(System.ReadOnlySpan<long> source, System.ReadOnlySpan<short> defLevels, System.Span<System.DateTime?> destination, short definedLevel, System.DateTimeKind kind = System.DateTimeKind.Unspecified) -> void
static ParquetSharp.LogicalRead.ConvertDateTimeMillis(System.ReadOnlySpan<long> source, System.Span<System.DateTime> destination, System.DateTimeKind kind = System.DateTimeKind.Unspecified) -> void
static ParquetSharp.LogicalRead.ConvertDecimal128(System.ReadOnlySpan<ParquetSharp.FixedLenByteArray> source, System.ReadOnlySpan<short> defLevels, System.Span<decimal?> destination, decimal multiplier, short definedLevel) -> void
static ParquetSharp.LogicalRead.ConvertDecimal128(System.ReadOnlySpan<ParquetSharp.FixedLenByteArray> source, System.Span<decimal> destination, decimal multiplier) -> void
static ParquetSharp.LogicalRead.ConvertDecimal32(System.ReadOnlySpan<int> source, System.ReadOnlySpan<short> defLevels, System.Span<decimal?> destination, decimal multiplier, short definedLevel) -> void
static ParquetSharp.LogicalRead.ConvertDecimal32(System.ReadOnlySpan<int> source, System.Span<decimal> destination, decimal multiplier) -> void
static ParquetSharp.LogicalRead.ConvertDecimal64(System.ReadOnlySpan<long> source, System.ReadOnlySpan<short> defLevels, System.Span<decimal?> destination, decimal multiplier, short definedLevel) -> void
static ParquetSharp.LogicalRead.ConvertDecimal64(System.ReadOnlySpan<long> source, System.Span<decimal> destination, decimal multiplier) -> void
static ParquetSharp.LogicalRead.ConvertHalf(System.ReadOnlySpan<ParquetSharp.FixedLenByteArray> source, System.ReadOnlySpan<short> defLevels, System.Span<System.Half?> destination, short definedLevel) -> void
static ParquetSharp.LogicalRead.ConvertHalf(System.ReadOnlySpan<ParquetSharp.FixedLenByteArray> source, System.Span<System.Half> destination) -> void
static ParquetSharp.LogicalRead.ConvertInt16(System.ReadOnlySpan<int> source, System.ReadOnlySpan<short> defLevels, System.Span<short?> destination, short definedLevel) -> void
static ParquetSharp.LogicalRead.ConvertInt16(System.ReadOnlySpan<int> source, System.Span<short> destination) -> void
static ParquetSharp.LogicalRead.ConvertInt8(System.ReadOnlySpan<int> source, System.ReadOnlySpan<short> defLevels, System.Span<sbyte?> destination, short definedLevel) -> void
static ParquetSharp.LogicalRead.ConvertInt8(System.ReadOnlySpan<int> source, System.Span<sbyte> destination) -> void
static ParquetSharp.LogicalRead.ConvertNative<TValue>(System.ReadOnlySpan<TValue> source, System.ReadOnlySpan<short> defLevels, System.Span<TValue?> destination, short definedLevel) -> void
static ParquetSharp.LogicalRead.ConvertNative<TValue>(System.ReadOnlySpan<TValue> source, System.Span<TValue> destination) -> void
static ParquetSharp.LogicalRead.ConvertString(System.ReadOnlySpan<ParquetSharp.ByteArray> source, System.ReadOnlySpan<short> defLevels, System.Span<string?> destination, short definedLevel) -> void
static ParquetSharp.LogicalRead.ConvertString(System.ReadOnlySpan<ParquetSharp.ByteArray> source, System.ReadOnlySpan<short> defLevels, System.Span<string?> destination, short definedLevel, ParquetSharp.ByteArrayReaderCache<ParquetSharp.ByteArray, string!>! byteArrayCache) -> void
static ParquetSharp.LogicalRead.ConvertTimeOnlyMicros(System.ReadOnlySpan<long> source, System.ReadOnlySpan<short> defLevels, System.Span<System.TimeOnly?> destination, short definedLevel) -> void
static ParquetSharp.LogicalRead.ConvertTimeOnlyMicros(System.ReadOnlySpan<long> source, System.Span<System.TimeOnly> destination) -> void
static ParquetSharp.LogicalRead.ConvertTimeOnlyMillis(System.ReadOnlySpan<int> source, System.ReadOnlySpan<short> defLevels, System.Span<System.TimeOnly?> destination, short definedLevel) -> void
static ParquetSharp.LogicalRead.ConvertTimeOnlyMillis(System.ReadOnlySpan<int> source, System.Span<System.TimeOnly> destination) -> void
static ParquetSharp.LogicalRead.ConvertTimeSpanMicros(System.ReadOnlySpan<long> source, System.ReadOnlySpan<short> defLevels, System.Span<System.TimeSpan?> destination, short definedLevel) -> void
static ParquetSharp.LogicalRead.ConvertTimeSpanMicros(System.ReadOnlySpan<long> source, System.Span<System.TimeSpan> destination) -> void
static ParquetSharp.LogicalRead.ConvertTimeSpanMillis(System.ReadOnlySpan<int> source, System.ReadOnlySpan<short> defLevels, System.Span<System.TimeSpan?> destination, short definedLevel) -> void
static ParquetSharp.LogicalRead.ConvertTimeSpanMillis(System.ReadOnlySpan<int> source, System.Span<System.TimeSpan> destination) -> void
static ParquetSharp.LogicalRead.ConvertUInt16(System.ReadOnlySpan<int> source, System.ReadOnlySpan<short> defLevels, System.Span<ushort?> destination, short definedLevel) -> void
static ParquetSharp.LogicalRead.ConvertUInt16(System.ReadOnlySpan<int> source, System.Span<ushort> destination) -> void
static ParquetSharp.LogicalRead.ConvertUInt8(System.ReadOnlySpan<int> source, System.ReadOnlySpan<short> defLevels, System.Span<byte?> destination, short definedLevel) -> void
static ParquetSharp.LogicalRead.ConvertUInt8(System.ReadOnlySpan<int> source, System.Span<byte> destination) -> void
static ParquetSharp.LogicalRead.ConvertUuid(System.ReadOnlySpan<ParquetSharp.FixedLenByteArray> source, System.ReadOnlySpan<short> defLevels, System.Span<System.Guid?> destination, short definedLevel) -> void
static ParquetSharp.LogicalRead.ConvertUuid(System.ReadOnlySpan<ParquetSharp.FixedLenByteArray> source, System.Span<System.Guid> destination) -> void
static ParquetSharp.LogicalRead.GetDirectReader<TTLogical, TTPhysical>() -> System.Delegate!
static ParquetSharp.LogicalRead.GetNativeConverter<TTLogical, TTPhysical>() -> System.Delegate!
static ParquetSharp.LogicalRead.GetNullableNativeConverter<TTLogical, TTPhysical>() -> System.Delegate!
static ParquetSharp.LogicalRead.IsCacheValid(ParquetSharp.ByteArrayReaderCache<ParquetSharp.ByteArray, string!>! byteArrayCache, ParquetSharp.ByteArray byteArray, string! str) -> bool
static ParquetSharp.LogicalRead.ReadDirect<TPhys>(ParquetSharp.ColumnReader<TPhys>! r, System.Span<TPhys> d) -> long
static ParquetSharp.LogicalRead.ToByteArray(ParquetSharp.ByteArray byteArray) -> byte[]!
static ParquetSharp.LogicalRead.ToDateOnly(int source) -> System.DateOnly
static ParquetSharp.LogicalRead.ToDateTimeMicros(long source) -> System.DateTime
static ParquetSharp.LogicalRead.ToDateTimeMicrosTicks(long source) -> long
static ParquetSharp.LogicalRead.ToDateTimeMillis(long source) -> System.DateTime
static ParquetSharp.LogicalRead.ToDateTimeMillisTicks(long source) -> long
static ParquetSharp.LogicalRead.ToDecimal(ParquetSharp.FixedLenByteArray source, decimal multiplier) -> decimal
static ParquetSharp.LogicalRead.ToHalf(ParquetSharp.FixedLenByteArray source) -> System.Half
static ParquetSharp.LogicalRead.ToString(ParquetSharp.ByteArray byteArray) -> string!
static ParquetSharp.LogicalRead.ToString(ParquetSharp.ByteArray byteArray, ParquetSharp.ByteArrayReaderCache<ParquetSharp.ByteArray, string!>! byteArrayCache) -> string!
static ParquetSharp.LogicalRead.ToTimeOnlyMicros(long source) -> System.TimeOnly
static ParquetSharp.LogicalRead.ToTimeOnlyMillis(int source) -> System.TimeOnly
static ParquetSharp.LogicalRead.ToTimeSpanMicros(long source) -> System.TimeSpan
static ParquetSharp.LogicalRead.ToTimeSpanMillis(int source) -> System.TimeSpan
static ParquetSharp.LogicalRead.ToUuid(ParquetSharp.FixedLenByteArray source) -> System.Guid
static ParquetSharp.LogicalRead<TLogical, TPhysical>.GetConverter(ParquetSharp.ColumnDescriptor! columnDescriptor, ParquetSharp.ColumnChunkMetaData! columnChunkMetaData) -> System.Delegate!
static ParquetSharp.LogicalRead<TLogical, TPhysical>.GetDirectReader() -> System.Delegate?
static ParquetSharp.LogicalType.Bson() -> ParquetSharp.LogicalType!
static ParquetSharp.LogicalType.Date() -> ParquetSharp.LogicalType!
static ParquetSharp.LogicalType.Decimal(int precision, int scale = 0) -> ParquetSharp.LogicalType!
static ParquetSharp.LogicalType.Enum() -> ParquetSharp.LogicalType!
static ParquetSharp.LogicalType.Float16() -> ParquetSharp.LogicalType!
static ParquetSharp.LogicalType.Int(int bitWidth, bool isSigned) -> ParquetSharp.LogicalType!
static ParquetSharp.LogicalType.Interval() -> ParquetSharp.LogicalType!
static ParquetSharp.LogicalType.Json() -> ParquetSharp.LogicalType!
static ParquetSharp.LogicalType.List() -> ParquetSharp.LogicalType!
static ParquetSharp.LogicalType.Map() -> ParquetSharp.LogicalType!
static ParquetSharp.LogicalType.None() -> ParquetSharp.LogicalType!
static ParquetSharp.LogicalType.Null() -> ParquetSharp.LogicalType!
static ParquetSharp.LogicalType.String() -> ParquetSharp.LogicalType!
static ParquetSharp.LogicalType.Time(bool isAdjustedToUtc, ParquetSharp.TimeUnit timeUnit) -> ParquetSharp.LogicalType!
static ParquetSharp.LogicalType.Timestamp(bool isAdjustedToUtc, ParquetSharp.TimeUnit timeUnit) -> ParquetSharp.LogicalType!
static ParquetSharp.LogicalType.Timestamp(bool isAdjustedToUtc, ParquetSharp.TimeUnit timeUnit, bool forceSetConvertedType) -> ParquetSharp.LogicalType!
static ParquetSharp.LogicalType.Uuid() -> ParquetSharp.LogicalType!
static ParquetSharp.LogicalWrite.ConvertByteArray(System.ReadOnlySpan<byte[]!> source, System.Span<short> defLevels, System.Span<ParquetSharp.ByteArray> destination, short nullLevel, ParquetSharp.ByteBuffer! byteBuffer) -> void
static ParquetSharp.LogicalWrite.ConvertDateOnly(System.ReadOnlySpan<System.DateOnly> source, System.Span<int> destination) -> void
static ParquetSharp.LogicalWrite.ConvertDateOnly(System.ReadOnlySpan<System.DateOnly?> source, System.Span<short> defLevels, System.Span<int> destination, short nullLevel) -> void
static ParquetSharp.LogicalWrite.ConvertDateTimeMicros(System.ReadOnlySpan<System.DateTime> source, System.Span<long> destination) -> void
static ParquetSharp.LogicalWrite.ConvertDateTimeMicros(System.ReadOnlySpan<System.DateTime?> source, System.Span<short> defLevels, System.Span<long> destination, short nullLevel) -> void
static ParquetSharp.LogicalWrite.ConvertDateTimeMillis(System.ReadOnlySpan<System.DateTime> source, System.Span<long> destination) -> void
static ParquetSharp.LogicalWrite.ConvertDateTimeMillis(System.ReadOnlySpan<System.DateTime?> source, System.Span<short> defLevels, System.Span<long> destination, short nullLevel) -> void
static ParquetSharp.LogicalWrite.ConvertDecimal128(System.ReadOnlySpan<decimal> source, System.Span<ParquetSharp.FixedLenByteArray> destination, decimal multiplier, ParquetSharp.ByteBuffer! byteBuffer) -> void
static ParquetSharp.LogicalWrite.ConvertDecimal128(System.ReadOnlySpan<decimal?> source, System.Span<short> defLevels, System.Span<ParquetSharp.FixedLenByteArray> destination, decimal multiplier, short nullLevel, ParquetSharp.ByteBuffer! byteBuffer) -> void
static ParquetSharp.LogicalWrite.ConvertHalf(System.ReadOnlySpan<System.Half> source, System.Span<ParquetSharp.FixedLenByteArray> destination, ParquetSharp.ByteBuffer! byteBuffer) -> void
static ParquetSharp.LogicalWrite.ConvertHalf(System.ReadOnlySpan<System.Half?> source, System.Span<short> defLevels, System.Span<ParquetSharp.FixedLenByteArray> destination, short nullLevel, ParquetSharp.ByteBuffer! byteBuffer) -> void
static ParquetSharp.LogicalWrite.ConvertInt16(System.ReadOnlySpan<short> source, System.Span<int> destination) -> void
static ParquetSharp.LogicalWrite.ConvertInt16(System.ReadOnlySpan<short?> source, System.Span<short> defLevels, System.Span<int> destination, short nullLevel) -> void
static ParquetSharp.LogicalWrite.ConvertInt8(System.ReadOnlySpan<sbyte> source, System.Span<int> destination) -> void
static ParquetSharp.LogicalWrite.ConvertInt8(System.ReadOnlySpan<sbyte?> source, System.Span<short> defLevels, System.Span<int> destination, short nullLevel) -> void
static ParquetSharp.LogicalWrite.ConvertNative<TValue>(System.ReadOnlySpan<TValue> source, System.Span<TValue> destination) -> void
static ParquetSharp.LogicalWrite.ConvertNative<TValue>(System.ReadOnlySpan<TValue?> source, System.Span<short> defLevels, System.Span<TValue> destination, short nullLevel) -> void
static ParquetSharp.LogicalWrite.ConvertString(System.ReadOnlySpan<string!> source, System.Span<short> defLevels, System.Span<ParquetSharp.ByteArray> destination, short nullLevel, ParquetSharp.ByteBuffer! byteBuffer) -> void
static ParquetSharp.LogicalWrite.ConvertTimeOnlyMicros(System.ReadOnlySpan<System.TimeOnly> source, System.Span<long> destination) -> void
static ParquetSharp.LogicalWrite.ConvertTimeOnlyMicros(System.ReadOnlySpan<System.TimeOnly?> source, System.Span<short> defLevels, System.Span<long> destination, short nullLevel) -> void
static ParquetSharp.LogicalWrite.ConvertTimeOnlyMillis(System.ReadOnlySpan<System.TimeOnly> source, System.Span<int> destination) -> void
static ParquetSharp.LogicalWrite.ConvertTimeOnlyMillis(System.ReadOnlySpan<System.TimeOnly?> source, System.Span<short> defLevels, System.Span<int> destination, short nullLevel) -> void
static ParquetSharp.LogicalWrite.ConvertTimeSpanMicros(System.ReadOnlySpan<System.TimeSpan> source, System.Span<long> destination) -> void
static ParquetSharp.LogicalWrite.ConvertTimeSpanMicros(System.ReadOnlySpan<System.TimeSpan?> source, System.Span<short> defLevels, System.Span<long> destination, short nullLevel) -> void
static ParquetSharp.LogicalWrite.ConvertTimeSpanMillis(System.ReadOnlySpan<System.TimeSpan> source, System.Span<int> destination) -> void
static ParquetSharp.LogicalWrite.ConvertTimeSpanMillis(System.ReadOnlySpan<System.TimeSpan?> source, System.Span<short> defLevels, System.Span<int> destination, short nullLevel) -> void
static ParquetSharp.LogicalWrite.ConvertUInt16(System.ReadOnlySpan<ushort> source, System.Span<int> destination) -> void
static ParquetSharp.LogicalWrite.ConvertUInt16(System.ReadOnlySpan<ushort?> source, System.Span<short> defLevels, System.Span<int> destination, short nullLevel) -> void
static ParquetSharp.LogicalWrite.ConvertUInt8(System.ReadOnlySpan<byte> source, System.Span<int> destination) -> void
static ParquetSharp.LogicalWrite.ConvertUInt8(System.ReadOnlySpan<byte?> source, System.Span<short> defLevels, System.Span<int> destination, short nullLevel) -> void
static ParquetSharp.LogicalWrite.ConvertUuid(System.ReadOnlySpan<System.Guid> source, System.Span<ParquetSharp.FixedLenByteArray> destination, ParquetSharp.ByteBuffer! byteBuffer) -> void
static ParquetSharp.LogicalWrite.ConvertUuid(System.ReadOnlySpan<System.Guid?> source, System.Span<short> defLevels, System.Span<ParquetSharp.FixedLenByteArray> destination, short nullLevel, ParquetSharp.ByteBuffer! byteBuffer) -> void
static ParquetSharp.LogicalWrite.FromByteArray(byte[]! array, ParquetSharp.ByteBuffer! byteBuffer) -> ParquetSharp.ByteArray
static ParquetSharp.LogicalWrite.FromDateOnly(System.DateOnly source) -> int
static ParquetSharp.LogicalWrite.FromDateTimeMicros(System.DateTime source) -> long
static ParquetSharp.LogicalWrite.FromDateTimeMillis(System.DateTime source) -> long
static ParquetSharp.LogicalWrite.FromDecimal(decimal source, decimal multiplier, ParquetSharp.ByteBuffer! byteBuffer) -> ParquetSharp.FixedLenByteArray
static ParquetSharp.LogicalWrite.FromFixedLength<TValue>(in TValue value, ParquetSharp.ByteBuffer! byteBuffer) -> ParquetSharp.FixedLenByteArray
static ParquetSharp.LogicalWrite.FromString(string! str, ParquetSharp.ByteBuffer! byteBuffer) -> ParquetSharp.ByteArray
static ParquetSharp.LogicalWrite.FromTimeOnlyMicros(System.TimeOnly source) -> long
static ParquetSharp.LogicalWrite.FromTimeOnlyMillis(System.TimeOnly source) -> int
static ParquetSharp.LogicalWrite.FromTimeSpanMicros(System.TimeSpan source) -> long
static ParquetSharp.LogicalWrite.FromTimeSpanMillis(System.TimeSpan source) -> int
static ParquetSharp.LogicalWrite.FromUuid(System.Guid uuid, ParquetSharp.ByteBuffer! byteBuffer) -> ParquetSharp.FixedLenByteArray
static ParquetSharp.LogicalWrite.GetNativeConverter<TTLogical, TTPhysical>() -> System.Delegate!
static ParquetSharp.LogicalWrite.GetNullableNativeConverter<TTLogical, TTPhysical>() -> System.Delegate!
static ParquetSharp.LogicalWrite<TLogical, TPhysical>.GetConverter(ParquetSharp.ColumnDescriptor! columnDescriptor, ParquetSharp.ByteBuffer? byteBuffer) -> System.Delegate!
static ParquetSharp.MemoryPool.GetDefaultMemoryPool() -> ParquetSharp.MemoryPool!
static ParquetSharp.ReaderProperties.GetDefaultReaderProperties() -> ParquetSharp.ReaderProperties!
static ParquetSharp.RowOriented.ParquetFile.CreateRowReader<TTuple>(ParquetSharp.IO.RandomAccessFile! randomAccessFile) -> ParquetSharp.RowOriented.ParquetRowReader<TTuple>!
static ParquetSharp.RowOriented.ParquetFile.CreateRowReader<TTuple>(ParquetSharp.IO.RandomAccessFile! randomAccessFile, ParquetSharp.LogicalTypeFactory! logicalTypeFactory, ParquetSharp.LogicalReadConverterFactory! logicalReadConverterFactory) -> ParquetSharp.RowOriented.ParquetRowReader<TTuple>!
static ParquetSharp.RowOriented.ParquetFile.CreateRowReader<TTuple>(ParquetSharp.IO.RandomAccessFile! randomAccessFile, ParquetSharp.ReaderProperties! readerProperties) -> ParquetSharp.RowOriented.ParquetRowReader<TTuple>!
static ParquetSharp.RowOriented.ParquetFile.CreateRowReader<TTuple>(ParquetSharp.IO.RandomAccessFile! randomAccessFile, ParquetSharp.ReaderProperties! readerProperties, ParquetSharp.LogicalTypeFactory! logicalTypeFactory, ParquetSharp.LogicalReadConverterFactory! logicalReadConverterFactory) -> ParquetSharp.RowOriented.ParquetRowReader<TTuple>!
static ParquetSharp.RowOriented.ParquetFile.CreateRowReader<TTuple>(string! path) -> ParquetSharp.RowOriented.ParquetRowReader<TTuple>!
static ParquetSharp.RowOriented.ParquetFile.CreateRowReader<TTuple>(string! path, ParquetSharp.LogicalTypeFactory! logicalTypeFactory, ParquetSharp.LogicalReadConverterFactory! logicalReadConverterFactory) -> ParquetSharp.RowOriented.ParquetRowReader<TTuple>!
static ParquetSharp.RowOriented.ParquetFile.CreateRowReader<TTuple>(string! path, ParquetSharp.ReaderProperties! readerProperties) -> ParquetSharp.RowOriented.ParquetRowReader<TTuple>!
static ParquetSharp.RowOriented.ParquetFile.CreateRowReader<TTuple>(string! path, ParquetSharp.ReaderProperties! readerProperties, ParquetSharp.LogicalTypeFactory! logicalTypeFactory, ParquetSharp.LogicalReadConverterFactory! logicalReadConverterFactory) -> ParquetSharp.RowOriented.ParquetRowReader<TTuple>!
static ParquetSharp.RowOriented.ParquetFile.CreateRowWriter<TTuple>(ParquetSharp.IO.OutputStream! outputStream, ParquetSharp.Column![]! columns, ParquetSharp.Compression compression = ParquetSharp.Compression.Snappy, System.Collections.Generic.IReadOnlyDictionary<string!, string!>? keyValueMetadata = null) -> ParquetSharp.RowOriented.ParquetRowWriter<TTuple>!
static ParquetSharp.RowOriented.ParquetFile.CreateRowWriter<TTuple>(ParquetSharp.IO.OutputStream! outputStream, ParquetSharp.Column![]! columns, ParquetSharp.LogicalTypeFactory! logicalTypeFactory, ParquetSharp.LogicalWriteConverterFactory! logicalWriteConverterFactory, ParquetSharp.Compression compression = ParquetSharp.Compression.Snappy, System.Collections.Generic.IReadOnlyDictionary<string!, string!>? keyValueMetadata = null) -> ParquetSharp.RowOriented.ParquetRowWriter<TTuple>!
static ParquetSharp.RowOriented.ParquetFile.CreateRowWriter<TTuple>(ParquetSharp.IO.OutputStream! outputStream, ParquetSharp.LogicalTypeFactory! logicalTypeFactory, ParquetSharp.LogicalWriteConverterFactory! logicalWriteConverterFactory, string![]? columnNames = null, ParquetSharp.Compression compression = ParquetSharp.Compression.Snappy, System.Collections.Generic.IReadOnlyDictionary<string!, string!>? keyValueMetadata = null) -> ParquetSharp.RowOriented.ParquetRowWriter<TTuple>!
static ParquetSharp.RowOriented.ParquetFile.CreateRowWriter<TTuple>(ParquetSharp.IO.OutputStream! outputStream, ParquetSharp.WriterProperties! writerProperties, ParquetSharp.Column![]! columns, ParquetSharp.LogicalTypeFactory! logicalTypeFactory, ParquetSharp.LogicalWriteConverterFactory! logicalWriteConverterFactory, System.Collections.Generic.IReadOnlyDictionary<string!, string!>? keyValueMetadata = null) -> ParquetSharp.RowOriented.ParquetRowWriter<TTuple>!
static ParquetSharp.RowOriented.ParquetFile.CreateRowWriter<TTuple>(ParquetSharp.IO.OutputStream! outputStream, ParquetSharp.WriterProperties! writerProperties, ParquetSharp.Column![]! columns, System.Collections.Generic.IReadOnlyDictionary<string!, string!>? keyValueMetadata = null) -> ParquetSharp.RowOriented.ParquetRowWriter<TTuple>!
static ParquetSharp.RowOriented.ParquetFile.CreateRowWriter<TTuple>(ParquetSharp.IO.OutputStream! outputStream, ParquetSharp.WriterProperties! writerProperties, ParquetSharp.LogicalTypeFactory! logicalTypeFactory, ParquetSharp.LogicalWriteConverterFactory! logicalWriteConverterFactory, string![]? columnNames = null, System.Collections.Generic.IReadOnlyDictionary<string!, string!>? keyValueMetadata = null) -> ParquetSharp.RowOriented.ParquetRowWriter<TTuple>!
static ParquetSharp.RowOriented.ParquetFile.CreateRowWriter<TTuple>(ParquetSharp.IO.OutputStream! outputStream, ParquetSharp.WriterProperties! writerProperties, string![]? columnNames = null, System.Collections.Generic.IReadOnlyDictionary<string!, string!>? keyValueMetadata = null) -> ParquetSharp.RowOriented.ParquetRowWriter<TTuple>!
static ParquetSharp.RowOriented.ParquetFile.CreateRowWriter<TTuple>(ParquetSharp.IO.OutputStream! outputStream, string![]? columnNames = null, ParquetSharp.Compression compression = ParquetSharp.Compression.Snappy, System.Collections.Generic.IReadOnlyDictionary<string!, string!>? keyValueMetadata = null) -> ParquetSharp.RowOriented.ParquetRowWriter<TTuple>!
static ParquetSharp.RowOriented.ParquetFile.CreateRowWriter<TTuple>(string! path, ParquetSharp.Column![]! columns, ParquetSharp.Compression compression = ParquetSharp.Compression.Snappy, System.Collections.Generic.IReadOnlyDictionary<string!, string!>? keyValueMetadata = null) -> ParquetSharp.RowOriented.ParquetRowWriter<TTuple>!
static ParquetSharp.RowOriented.ParquetFile.CreateRowWriter<TTuple>(string! path, ParquetSharp.Column![]! columns, ParquetSharp.LogicalTypeFactory! logicalTypeFactory, ParquetSharp.LogicalWriteConverterFactory! logicalWriteConverterFactory, ParquetSharp.Compression compression = ParquetSharp.Compression.Snappy, System.Collections.Generic.IReadOnlyDictionary<string!, string!>? keyValueMetadata = null) -> ParquetSharp.RowOriented.ParquetRowWriter<TTuple>!
static ParquetSharp.RowOriented.ParquetFile.CreateRowWriter<TTuple>(string! path, ParquetSharp.LogicalTypeFactory! logicalTypeFactory, ParquetSharp.LogicalWriteConverterFactory! logicalWriteConverterFactory, string![]? columnNames = null, ParquetSharp.Compression compression = ParquetSharp.Compression.Snappy, System.Collections.Generic.IReadOnlyDictionary<string!, string!>? keyValueMetadata = null) -> ParquetSharp.RowOriented.ParquetRowWriter<TTuple>!
static ParquetSharp.RowOriented.ParquetFile.CreateRowWriter<TTuple>(string! path, ParquetSharp.WriterProperties! writerProperties, ParquetSharp.Column![]! columns, ParquetSharp.LogicalTypeFactory! logicalTypeFactory, ParquetSharp.LogicalWriteConverterFactory! logicalWriteConverterFactory, System.Collections.Generic.IReadOnlyDictionary<string!, string!>? keyValueMetadata = null) -> ParquetSharp.RowOriented.ParquetRowWriter<TTuple>!
static ParquetSharp.RowOriented.ParquetFile.CreateRowWriter<TTuple>(string! path, ParquetSharp.WriterProperties! writerProperties, ParquetSharp.Column![]! columns, System.Collections.Generic.IReadOnlyDictionary<string!, string!>? keyValueMetadata = null) -> ParquetSharp.RowOriented.ParquetRowWriter<TTuple>!
static ParquetSharp.RowOriented.ParquetFile.CreateRowWriter<TTuple>(string! path, ParquetSharp.WriterProperties! writerProperties, ParquetSharp.LogicalTypeFactory! logicalTypeFactory, ParquetSharp.LogicalWriteConverterFactory! logicalWriteConverterFactory, string![]? columnNames = null, System.Collections.Generic.IReadOnlyDictionary<string!, string!>? keyValueMetadata = null) -> ParquetSharp.RowOriented.ParquetRowWriter<TTuple>!
static ParquetSharp.RowOriented.ParquetFile.CreateRowWriter<TTuple>(string! path, ParquetSharp.WriterProperties! writerProperties, string![]? columnNames = null, System.Collections.Generic.IReadOnlyDictionary<string!, string!>? keyValueMetadata = null) -> ParquetSharp.RowOriented.ParquetRowWriter<TTuple>!
static ParquetSharp.RowOriented.ParquetFile.CreateRowWriter<TTuple>(string! path, string![]? columnNames = null, ParquetSharp.Compression compression = ParquetSharp.Compression.Snappy, System.Collections.Generic.IReadOnlyDictionary<string!, string!>? keyValueMetadata = null) -> ParquetSharp.RowOriented.ParquetRowWriter<TTuple>!
static ParquetSharp.RowOriented.ParquetFile.OnReadExpressionCreated -> System.Action<System.Linq.Expressions.Expression!>?
static ParquetSharp.RowOriented.ParquetFile.OnWriteExpressionCreated -> System.Action<System.Linq.Expressions.Expression!>?
static ParquetSharp.WriterProperties.GetDefaultWriterProperties() -> ParquetSharp.WriterProperties!
static readonly ParquetSharp.DateTimeNanos.MaxDateTimeValue -> System.DateTime
static readonly ParquetSharp.DateTimeNanos.MinDateTimeValue -> System.DateTime
static readonly ParquetSharp.LogicalReadConverterFactory.Default -> ParquetSharp.LogicalReadConverterFactory!
static readonly ParquetSharp.LogicalTypeFactory.Default -> ParquetSharp.LogicalTypeFactory!
static readonly ParquetSharp.LogicalTypeFactory.DefaultPhysicalTypeMapping -> System.Collections.Generic.IReadOnlyDictionary<ParquetSharp.PhysicalType, System.Type!>!
static readonly ParquetSharp.LogicalTypeFactory.DefaultPrimitiveMapping -> System.Collections.Generic.IReadOnlyDictionary<System.Type!, (ParquetSharp.LogicalType? logicalType, ParquetSharp.Repetition repetition, ParquetSharp.PhysicalType physicalType)>!
static readonly ParquetSharp.LogicalWriteConverterFactory.Default -> ParquetSharp.LogicalWriteConverterFactory!
virtual ParquetSharp.LogicalColumnStream<TSource>.Dispose() -> void
virtual ParquetSharp.LogicalReadConverterFactory.GetConverter<TLogical, TPhysical>(ParquetSharp.ColumnDescriptor! columnDescriptor, ParquetSharp.ColumnChunkMetaData! columnChunkMetaData) -> System.Delegate!
virtual ParquetSharp.LogicalReadConverterFactory.GetDirectReader<TLogical, TPhysical>() -> System.Delegate?
virtual ParquetSharp.LogicalTypeFactory.GetSystemTypes(ParquetSharp.ColumnDescriptor! descriptor) -> (System.Type! physicalType, System.Type! logicalType)
virtual ParquetSharp.LogicalTypeFactory.GetSystemTypes(ParquetSharp.ColumnDescriptor! descriptor, System.Type? columnLogicalTypeOverride) -> (System.Type! physicalType, System.Type! logicalType)
virtual ParquetSharp.LogicalTypeFactory.GetTypesOverride(ParquetSharp.LogicalType? logicalTypeOverride, ParquetSharp.LogicalType? logicalType, ParquetSharp.PhysicalType physicalType) -> (ParquetSharp.LogicalType! logicalType, ParquetSharp.PhysicalType physicalType)
virtual ParquetSharp.LogicalTypeFactory.IsSupported(System.Type! type) -> bool
virtual ParquetSharp.LogicalTypeFactory.TryGetParquetTypes(System.Type! logicalSystemType, out (ParquetSharp.LogicalType? logicalType, ParquetSharp.Repetition repetition, ParquetSharp.PhysicalType physicalType) entry) -> bool
virtual ParquetSharp.LogicalWriteConverterFactory.GetConverter<TLogical, TPhysical>(ParquetSharp.ColumnDescriptor! columnDescriptor, ParquetSharp.ByteBuffer? byteBuffer) -> System.Delegate!
