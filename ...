diff --git a/.gitignore b/.gitignore
index 05814ba..4f01d1d 100644
--- a/.gitignore
+++ b/.gitignore
@@ -4,6 +4,7 @@ obj
 nuget
 BenchmarkDotNet.Artifacts
 .vs
+packages
 
 # The solution files get generated by vcpkg on Windows
 # and by the C# Dev Kit within a dev container.
diff --git a/cpp/WriterProperties.cpp b/cpp/WriterProperties.cpp
index 15e1152..7a8ffd7 100644
--- a/cpp/WriterProperties.cpp
+++ b/cpp/WriterProperties.cpp
@@ -1,4 +1,3 @@
-
 #include "cpp/ParquetSharpExport.h"
 #include "CString.h"
 #include "ExceptionInfo.h"
@@ -80,45 +79,57 @@ extern "C"
 		TRYCATCH(*enabled = (*writer_properties)->page_checksum_enabled();)
 	}
 
-	// ColumnPath taking methods.
-
-	//PARQUETSHARP_EXPORT ExceptionInfo* WriterProperties_Column_Properties(const std::shared_ptr<WriterProperties>* writer_properties, const std::shared_ptr<schema::ColumnPath>* path, const ColumnProperties** columnProperties)
-	//{
-	//	TRYCATCH(*columnProperties = &(*writer_properties)->column_properties(*path);)
-	//}
-
-	PARQUETSHARP_EXPORT ExceptionInfo* WriterProperties_Compression(const std::shared_ptr<WriterProperties>* writer_properties, const std::shared_ptr<schema::ColumnPath>* path, Compression::type* compression)
-	{
-		TRYCATCH(*compression = (*writer_properties)->compression(*path);)
-	}
-
-	PARQUETSHARP_EXPORT ExceptionInfo* WriterProperties_Compression_Level(const std::shared_ptr<WriterProperties>* writer_properties, const std::shared_ptr<schema::ColumnPath>* path, int32_t* compression_level)
-	{
-		TRYCATCH(*compression_level = (*writer_properties)->compression_level(*path);)
-	}
-
-	PARQUETSHARP_EXPORT ExceptionInfo* WriterProperties_Dictionary_Enabled(const std::shared_ptr<WriterProperties>* writer_properties, const std::shared_ptr<schema::ColumnPath>* path, bool* enabled)
-	{
-		TRYCATCH(*enabled = (*writer_properties)->dictionary_enabled(*path);)
-	}
-
-	PARQUETSHARP_EXPORT ExceptionInfo* WriterProperties_Encoding(const std::shared_ptr<WriterProperties>* writer_properties, const std::shared_ptr<schema::ColumnPath>* path, Encoding::type* encoding)
-	{
-		TRYCATCH(*encoding = (*writer_properties)->encoding(*path);)
-	}
-
-	PARQUETSHARP_EXPORT ExceptionInfo* WriterProperties_File_Encryption_Properties(const std::shared_ptr<WriterProperties>* writer_properties, std::shared_ptr<FileEncryptionProperties>** file_encryption_properties)
-	{
-		TRYCATCH(*file_encryption_properties = new std::shared_ptr<FileEncryptionProperties>((*writer_properties)->file_encryption_properties());)
-	}
-
-	PARQUETSHARP_EXPORT ExceptionInfo* WriterProperties_Statistics_Enabled(const std::shared_ptr<WriterProperties>* writer_properties, const std::shared_ptr<schema::ColumnPath>* path, bool* enabled)
-	{
-		TRYCATCH(*enabled = (*writer_properties)->statistics_enabled(*path);)
-	}
-
-	PARQUETSHARP_EXPORT ExceptionInfo* WriterProperties_Max_Statistics_Size(const std::shared_ptr<WriterProperties>* writer_properties, const std::shared_ptr<schema::ColumnPath>* path, size_t* max_statistics_size)
-	{
-		TRYCATCH(*max_statistics_size = (*writer_properties)->max_statistics_size(*path);)
+	PARQUETSHARP_EXPORT ExceptionInfo* WriterProperties_Sorting_Columns(const std::shared_ptr<WriterProperties>* writer_properties, int32_t** column_indices, bool** descending, bool** nulls_first, int* num_columns)
+	{
+		try
+		{
+			auto sorting_columns = (*writer_properties)->sorting_columns();
+			
+			*num_columns = static_cast<int>(sorting_columns.size());
+			
+			if (*num_columns > 0)
+			{
+				*column_indices = new int32_t[*num_columns];
+				*descending = new bool[*num_columns];
+				*nulls_first = new bool[*num_columns];
+				
+				for (int i = 0; i < *num_columns; ++i)
+				{
+					(*column_indices)[i] = sorting_columns[i].column_idx;
+					(*descending)[i] = sorting_columns[i].descending;
+					(*nulls_first)[i] = sorting_columns[i].nulls_first;
+				}
+			}
+			else
+			{
+				*column_indices = nullptr;
+				*descending = nullptr;
+				*nulls_first = nullptr;
+			}
+			
+			return nullptr;
+		}
+		catch (const std::exception& e)
+		{
+			return new ExceptionInfo(typeid(e).name(), e.what());
+		}
+	}
+
+	PARQUETSHARP_EXPORT void WriterProperties_Sorting_Columns_Free(int32_t* column_indices, bool* descending, bool* nulls_first)
+	{
+		if (column_indices != nullptr)
+		{
+			delete[] column_indices;
+		}
+		
+		if (descending != nullptr)
+		{
+			delete[] descending;
+		}
+		
+		if (nulls_first != nullptr)
+		{
+			delete[] nulls_first;
+		}
 	}
 }
diff --git a/cpp/WriterPropertiesBuilder.cpp b/cpp/WriterPropertiesBuilder.cpp
index 2b0545d..8335b59 100644
--- a/cpp/WriterPropertiesBuilder.cpp
+++ b/cpp/WriterPropertiesBuilder.cpp
@@ -1,4 +1,3 @@
-
 #include "cpp/ParquetSharpExport.h"
 #include "ExceptionInfo.h"
 
@@ -209,4 +208,21 @@ extern "C"
 	{
 		TRYCATCH(builder->disable_page_checksum();)
 	}
+
+	PARQUETSHARP_EXPORT ExceptionInfo* WriterPropertiesBuilder_Sorting_Columns(WriterProperties::Builder* builder, int32_t* column_indices, bool* descending, bool* nulls_first, int num_columns)
+	{
+		std::vector<parquet::SortingColumn> sorting_columns;
+		
+		// Create SortingColumn objects for each column
+		for (int i = 0; i < num_columns; ++i)
+		{
+			parquet::SortingColumn column;
+			column.column_idx = column_indices[i];
+			column.descending = descending[i];
+			column.nulls_first = nulls_first[i];
+			sorting_columns.push_back(column);
+		}
+		
+		TRYCATCH(builder->set_sorting_columns(sorting_columns);)
+	}
 }
diff --git a/csharp.test/TestWriterProperties.cs b/csharp.test/TestWriterProperties.cs
index 5b4ab97..129395f 100644
--- a/csharp.test/TestWriterProperties.cs
+++ b/csharp.test/TestWriterProperties.cs
@@ -247,5 +247,33 @@ namespace ParquetSharp.Test
             using var valueReader = groupReader.Column(0).LogicalReader<float?>();
             Assert.AreEqual(values, valueReader.ReadAll(numRows));
         }
+
+        [Test]
+        public static void TestSortingColumns()
+        {
+            // Test with some sorting columns
+            var columnIndices = new[] { 0, 1 }; // First and second columns
+            var isDescending = new[] { false, true }; // First column ascending, second descending
+            var nullsFirst = new[] { true, false }; // Nulls first for first column, nulls last for second column
+
+            var p = new WriterPropertiesBuilder()
+                .SortingColumns(columnIndices, isDescending, nullsFirst)
+                .Build();
+
+            var sortingColumns = p.SortingColumns();
+            
+            Assert.AreEqual(2, sortingColumns.ColumnIndices.Length);
+            Assert.AreEqual(2, sortingColumns.IsDescending.Length);
+            Assert.AreEqual(2, sortingColumns.NullsFirst.Length);
+            
+            Assert.AreEqual(0, sortingColumns.ColumnIndices[0]);
+            Assert.AreEqual(1, sortingColumns.ColumnIndices[1]);
+            
+            Assert.AreEqual(false, sortingColumns.IsDescending[0]);
+            Assert.AreEqual(true, sortingColumns.IsDescending[1]);
+            
+            Assert.AreEqual(true, sortingColumns.NullsFirst[0]);
+            Assert.AreEqual(false, sortingColumns.NullsFirst[1]);
+        }
     }
 }
diff --git a/csharp/DefaultWriterProperties.cs b/csharp/DefaultWriterProperties.cs
index a328362..ec2e770 100644
--- a/csharp/DefaultWriterProperties.cs
+++ b/csharp/DefaultWriterProperties.cs
@@ -75,5 +75,20 @@ namespace ParquetSharp
         /// Write CRC page checksums
         /// </summary>
         public static bool? PageChecksumEnabled { get; set; }
+
+        /// <summary>
+        /// Column indices to sort by when writing to a Parquet file
+        /// </summary>
+        public static int[]? SortingColumnIndices { get; set; }
+
+        /// <summary>
+        /// Whether each corresponding sorting column should be sorted in descending order
+        /// </summary>
+        public static bool[]? SortingColumnsDescending { get; set; }
+
+        /// <summary>
+        /// Whether nulls should come before non-null values for each sorting column
+        /// </summary>
+        public static bool[]? SortingColumnsNullsFirst { get; set; }
     }
 }
diff --git a/csharp/PublicAPI.Shipped.txt b/csharp/PublicAPI.Shipped.txt
new file mode 100644
index 0000000..f8aee03
--- /dev/null
+++ b/csharp/PublicAPI.Shipped.txt
@@ -0,0 +1,10 @@
+ParquetSharp.DefaultWriterProperties.SortingColumnIndices.get
+ParquetSharp.DefaultWriterProperties.SortingColumnIndices.set
+ParquetSharp.DefaultWriterProperties.SortingColumnsDescending.get
+ParquetSharp.DefaultWriterProperties.SortingColumnsDescending.set
+ParquetSharp.DefaultWriterProperties.SortingColumnsNullsFirst.get
+ParquetSharp.DefaultWriterProperties.SortingColumnsNullsFirst.set
+ParquetSharp.WriterProperties.SortingColumns
+static ParquetSharp.WriterProperties.GetDefaultWriterProperties() -> ParquetSharp.WriterProperties!
+static ParquetSharp.RowOriented.ParquetFile.OnReadExpressionCreated -> System.Action<System.Linq.Expressions.Expression!>?
+static ParquetSharp.RowOriented.ParquetFile.OnWriteExpressionCreated -> System.Action<System.Linq.Expressions.Expression!>?
diff --git a/csharp/PublicAPI.Unshipped.txt b/csharp/PublicAPI.Unshipped.txt
new file mode 100644
index 0000000..f8aee03
--- /dev/null
+++ b/csharp/PublicAPI.Unshipped.txt
@@ -0,0 +1,10 @@
+ParquetSharp.DefaultWriterProperties.SortingColumnIndices.get
+ParquetSharp.DefaultWriterProperties.SortingColumnIndices.set
+ParquetSharp.DefaultWriterProperties.SortingColumnsDescending.get
+ParquetSharp.DefaultWriterProperties.SortingColumnsDescending.set
+ParquetSharp.DefaultWriterProperties.SortingColumnsNullsFirst.get
+ParquetSharp.DefaultWriterProperties.SortingColumnsNullsFirst.set
+ParquetSharp.WriterProperties.SortingColumns
+static ParquetSharp.WriterProperties.GetDefaultWriterProperties() -> ParquetSharp.WriterProperties!
+static ParquetSharp.RowOriented.ParquetFile.OnReadExpressionCreated -> System.Action<System.Linq.Expressions.Expression!>?
+static ParquetSharp.RowOriented.ParquetFile.OnWriteExpressionCreated -> System.Action<System.Linq.Expressions.Expression!>?
diff --git a/csharp/PublicAPI/netstandard2.1/PublicAPI.Shipped.txt b/csharp/PublicAPI/netstandard2.1/PublicAPI.Shipped.txt
index 79dbc89..74abcca 100644
--- a/csharp/PublicAPI/netstandard2.1/PublicAPI.Shipped.txt
+++ b/csharp/PublicAPI/netstandard2.1/PublicAPI.Shipped.txt
@@ -860,6 +860,12 @@ static ParquetSharp.DefaultWriterProperties.MaxRowGroupLength.get -> long?
 static ParquetSharp.DefaultWriterProperties.MaxRowGroupLength.set -> void
 static ParquetSharp.DefaultWriterProperties.PageChecksumEnabled.get -> bool?
 static ParquetSharp.DefaultWriterProperties.PageChecksumEnabled.set -> void
+static ParquetSharp.DefaultWriterProperties.SortingColumnIndices.get -> int[]?
+static ParquetSharp.DefaultWriterProperties.SortingColumnIndices.set -> void
+static ParquetSharp.DefaultWriterProperties.SortingColumnsDescending.get -> bool[]?
+static ParquetSharp.DefaultWriterProperties.SortingColumnsDescending.set -> void
+static ParquetSharp.DefaultWriterProperties.SortingColumnsNullsFirst.get -> bool[]?
+static ParquetSharp.DefaultWriterProperties.SortingColumnsNullsFirst.set -> void
 static ParquetSharp.DefaultWriterProperties.Version.get -> ParquetSharp.ParquetVersion?
 static ParquetSharp.DefaultWriterProperties.Version.set -> void
 static ParquetSharp.DefaultWriterProperties.WriteBatchSize.get -> long?
@@ -986,14 +992,6 @@ static ParquetSharp.RowOriented.ParquetFile.CreateRowWriter<TTuple>(ParquetSharp
 static ParquetSharp.RowOriented.ParquetFile.CreateRowWriter<TTuple>(ParquetSharp.IO.OutputStream! outputStream, ParquetSharp.WriterProperties! writerProperties, ParquetSharp.LogicalTypeFactory! logicalTypeFactory, ParquetSharp.LogicalWriteConverterFactory! logicalWriteConverterFactory, string![]? columnNames = null, System.Collections.Generic.IReadOnlyDictionary<string!, string!>? keyValueMetadata = null) -> ParquetSharp.RowOriented.ParquetRowWriter<TTuple>!
 static ParquetSharp.RowOriented.ParquetFile.CreateRowWriter<TTuple>(ParquetSharp.IO.OutputStream! outputStream, ParquetSharp.WriterProperties! writerProperties, string![]? columnNames = null, System.Collections.Generic.IReadOnlyDictionary<string!, string!>? keyValueMetadata = null) -> ParquetSharp.RowOriented.ParquetRowWriter<TTuple>!
 static ParquetSharp.RowOriented.ParquetFile.CreateRowWriter<TTuple>(ParquetSharp.IO.OutputStream! outputStream, string![]? columnNames = null, ParquetSharp.Compression compression = ParquetSharp.Compression.Snappy, System.Collections.Generic.IReadOnlyDictionary<string!, string!>? keyValueMetadata = null) -> ParquetSharp.RowOriented.ParquetRowWriter<TTuple>!
-static ParquetSharp.RowOriented.ParquetFile.CreateRowWriter<TTuple>(string! path, ParquetSharp.Column![]! columns, ParquetSharp.Compression compression = ParquetSharp.Compression.Snappy, System.Collections.Generic.IReadOnlyDictionary<string!, string!>? keyValueMetadata = null) -> ParquetSharp.RowOriented.ParquetRowWriter<TTuple>!
-static ParquetSharp.RowOriented.ParquetFile.CreateRowWriter<TTuple>(string! path, ParquetSharp.Column![]! columns, ParquetSharp.LogicalTypeFactory! logicalTypeFactory, ParquetSharp.LogicalWriteConverterFactory! logicalWriteConverterFactory, ParquetSharp.Compression compression = ParquetSharp.Compression.Snappy, System.Collections.Generic.IReadOnlyDictionary<string!, string!>? keyValueMetadata = null) -> ParquetSharp.RowOriented.ParquetRowWriter<TTuple>!
-static ParquetSharp.RowOriented.ParquetFile.CreateRowWriter<TTuple>(string! path, ParquetSharp.LogicalTypeFactory! logicalTypeFactory, ParquetSharp.LogicalWriteConverterFactory! logicalWriteConverterFactory, string![]? columnNames = null, ParquetSharp.Compression compression = ParquetSharp.Compression.Snappy, System.Collections.Generic.IReadOnlyDictionary<string!, string!>? keyValueMetadata = null) -> ParquetSharp.RowOriented.ParquetRowWriter<TTuple>!
-static ParquetSharp.RowOriented.ParquetFile.CreateRowWriter<TTuple>(string! path, ParquetSharp.WriterProperties! writerProperties, ParquetSharp.Column![]! columns, ParquetSharp.LogicalTypeFactory! logicalTypeFactory, ParquetSharp.LogicalWriteConverterFactory! logicalWriteConverterFactory, System.Collections.Generic.IReadOnlyDictionary<string!, string!>? keyValueMetadata = null) -> ParquetSharp.RowOriented.ParquetRowWriter<TTuple>!
-static ParquetSharp.RowOriented.ParquetFile.CreateRowWriter<TTuple>(string! path, ParquetSharp.WriterProperties! writerProperties, ParquetSharp.Column![]! columns, System.Collections.Generic.IReadOnlyDictionary<string!, string!>? keyValueMetadata = null) -> ParquetSharp.RowOriented.ParquetRowWriter<TTuple>!
-static ParquetSharp.RowOriented.ParquetFile.CreateRowWriter<TTuple>(string! path, ParquetSharp.WriterProperties! writerProperties, ParquetSharp.LogicalTypeFactory! logicalTypeFactory, ParquetSharp.LogicalWriteConverterFactory! logicalWriteConverterFactory, string![]? columnNames = null, System.Collections.Generic.IReadOnlyDictionary<string!, string!>? keyValueMetadata = null) -> ParquetSharp.RowOriented.ParquetRowWriter<TTuple>!
-static ParquetSharp.RowOriented.ParquetFile.CreateRowWriter<TTuple>(string! path, ParquetSharp.WriterProperties! writerProperties, string![]? columnNames = null, System.Collections.Generic.IReadOnlyDictionary<string!, string!>? keyValueMetadata = null) -> ParquetSharp.RowOriented.ParquetRowWriter<TTuple>!
-static ParquetSharp.RowOriented.ParquetFile.CreateRowWriter<TTuple>(string! path, string![]? columnNames = null, ParquetSharp.Compression compression = ParquetSharp.Compression.Snappy, System.Collections.Generic.IReadOnlyDictionary<string!, string!>? keyValueMetadata = null) -> ParquetSharp.RowOriented.ParquetRowWriter<TTuple>!
 static ParquetSharp.RowOriented.ParquetFile.OnReadExpressionCreated -> System.Action<System.Linq.Expressions.Expression!>?
 static ParquetSharp.RowOriented.ParquetFile.OnWriteExpressionCreated -> System.Action<System.Linq.Expressions.Expression!>?
 static ParquetSharp.WriterProperties.GetDefaultWriterProperties() -> ParquetSharp.WriterProperties!
diff --git a/csharp/WriterProperties.cs b/csharp/WriterProperties.cs
index 5c69ecd..d0341a5 100644
--- a/csharp/WriterProperties.cs
+++ b/csharp/WriterProperties.cs
@@ -143,6 +143,64 @@ namespace ParquetSharp
         /// </summary>
         public bool PageChecksumEnabled => ExceptionInfo.Return<bool>(Handle, WriterProperties_Page_Checksum_Enabled);
 
+        /// <summary>
+        /// Gets the columns by which the data is sorted when writing to the file, along with sort order details.
+        /// </summary>
+        /// <returns>
+        /// A tuple containing three arrays:
+        /// - The first array contains the indices of the columns being sorted
+        /// - The second array indicates whether each corresponding column is sorted in descending order (true) or ascending order (false)
+        /// - The third array indicates whether nulls come before non-null values (true) or after (false) for each column
+        /// </returns>
+        public (int[] ColumnIndices, bool[] IsDescending, bool[] NullsFirst) SortingColumns()
+        {
+            IntPtr columnIndicesPtr = IntPtr.Zero;
+            IntPtr descendingPtr = IntPtr.Zero;
+            IntPtr nullsFirstPtr = IntPtr.Zero;
+            int numColumns = 0;
+
+            try
+            {
+                ExceptionInfo.Check(WriterProperties_Sorting_Columns(
+                    Handle.IntPtr,
+                    ref columnIndicesPtr,
+                    ref descendingPtr,
+                    ref nullsFirstPtr,
+                    ref numColumns));
+
+                var columnIndices = new int[numColumns];
+                var isDescending = new bool[numColumns];
+                var nullsFirst = new bool[numColumns];
+
+                // Read column indices
+                for (var i = 0; i < numColumns; ++i)
+                {
+                    columnIndices[i] = Marshal.ReadInt32(columnIndicesPtr, i * sizeof(int));
+                }
+
+                // Read descending flags 
+                for (var i = 0; i < numColumns; ++i)
+                {
+                    isDescending[i] = Marshal.ReadByte(descendingPtr, i) != 0;
+                }
+
+                // Read nulls_first flags
+                for (var i = 0; i < numColumns; ++i)
+                {
+                    nullsFirst[i] = Marshal.ReadByte(nullsFirstPtr, i) != 0;
+                }
+
+                return (columnIndices, isDescending, nullsFirst);
+            }
+            finally
+            {
+                if (columnIndicesPtr != IntPtr.Zero || descendingPtr != IntPtr.Zero || nullsFirstPtr != IntPtr.Zero)
+                {
+                    WriterProperties_Sorting_Columns_Free(columnIndicesPtr, descendingPtr, nullsFirstPtr);
+                }
+            }
+        }
+
         internal readonly ParquetHandle Handle;
 
         [DllImport(ParquetDll.Name)]
@@ -210,5 +268,11 @@ namespace ParquetSharp
 
         [DllImport(ParquetDll.Name)]
         private static extern IntPtr WriterProperties_Max_Statistics_Size(IntPtr writerProperties, IntPtr path, [MarshalAs(UnmanagedType.I1)] out ulong maxStatisticsSize);
+
+        [DllImport(ParquetDll.Name)]
+        private static extern IntPtr WriterProperties_Sorting_Columns(IntPtr writerProperties, ref IntPtr columnIndices, ref IntPtr descending, ref IntPtr nullsFirst, ref int numColumns);
+
+        [DllImport(ParquetDll.Name)]
+        private static extern void WriterProperties_Sorting_Columns_Free(IntPtr columnIndices, IntPtr descending, IntPtr nullsFirst);
     }
 }
diff --git a/csharp/WriterPropertiesBuilder.cs b/csharp/WriterPropertiesBuilder.cs
index c04ed8b..19bb7e9 100644
--- a/csharp/WriterPropertiesBuilder.cs
+++ b/csharp/WriterPropertiesBuilder.cs
@@ -1,4 +1,5 @@
 ﻿using System;
+using System.Linq;
 using System.Runtime.CompilerServices;
 using System.Runtime.InteropServices;
 using ParquetSharp.Schema;
@@ -475,6 +476,77 @@ namespace ParquetSharp
             return this;
         }
 
+        /// <summary>
+        /// Set the sorting columns used to sort data when writing to a Parquet file.
+        /// </summary>
+        /// <param name="columnIndices">Indices of the columns to sort by.</param>
+        /// <param name="isDescending">Whether each column should be sorted in descending order.</param>
+        /// <param name="nullsFirst">Whether nulls should come before non-null values for each column.</param>
+        /// <returns>This builder instance.</returns>
+        public WriterPropertiesBuilder SortingColumns(int[] columnIndices, bool[] isDescending, bool[] nullsFirst)
+        {
+            if (columnIndices == null)
+            {
+                throw new ArgumentNullException(nameof(columnIndices));
+            }
+
+            if (isDescending == null)
+            {
+                throw new ArgumentNullException(nameof(isDescending));
+            }
+
+            if (nullsFirst == null)
+            {
+                throw new ArgumentNullException(nameof(nullsFirst));
+            }
+
+            if (columnIndices.Length != isDescending.Length || columnIndices.Length != nullsFirst.Length)
+            {
+                throw new ArgumentException("The length of columnIndices, isDescending, and nullsFirst must be the same");
+            }
+
+            // Pin the arrays in memory
+            GCHandle columnIndicesHandle = GCHandle.Alloc(columnIndices, GCHandleType.Pinned);
+            try
+            {
+                IntPtr columnIndicesPtr = columnIndicesHandle.AddrOfPinnedObject();
+                
+                GCHandle isDescendingHandle = GCHandle.Alloc(isDescending, GCHandleType.Pinned);
+                try
+                {
+                    IntPtr isDescendingPtr = isDescendingHandle.AddrOfPinnedObject();
+                    
+                    GCHandle nullsFirstHandle = GCHandle.Alloc(nullsFirst, GCHandleType.Pinned);
+                    try
+                    {
+                        IntPtr nullsFirstPtr = nullsFirstHandle.AddrOfPinnedObject();
+                        
+                        ExceptionInfo.Check(WriterPropertiesBuilder_Sorting_Columns(
+                            _handle.IntPtr,
+                            columnIndicesPtr,
+                            isDescendingPtr,
+                            nullsFirstPtr,
+                            columnIndices.Length));
+                    }
+                    finally
+                    {
+                        nullsFirstHandle.Free();
+                    }
+                }
+                finally
+                {
+                    isDescendingHandle.Free();
+                }
+            }
+            finally
+            {
+                columnIndicesHandle.Free();
+            }
+
+            GC.KeepAlive(_handle);
+            return this;
+        }
+
         private void ApplyDefaults()
         {
             OnDefaultProperty(DefaultWriterProperties.EnableDictionary, enabled =>
@@ -542,6 +614,20 @@ namespace ParquetSharp
                     DisablePageChecksum();
                 }
             });
+
+            // Apply sorting columns default if all required arrays are provided and have the same length
+            if (DefaultWriterProperties.SortingColumnIndices != null && 
+                DefaultWriterProperties.SortingColumnsDescending != null &&
+                DefaultWriterProperties.SortingColumnsNullsFirst != null &&
+                DefaultWriterProperties.SortingColumnIndices.Length == DefaultWriterProperties.SortingColumnsDescending.Length &&
+                DefaultWriterProperties.SortingColumnIndices.Length == DefaultWriterProperties.SortingColumnsNullsFirst.Length &&
+                DefaultWriterProperties.SortingColumnIndices.Length > 0)
+            {
+                SortingColumns(
+                    DefaultWriterProperties.SortingColumnIndices, 
+                    DefaultWriterProperties.SortingColumnsDescending,
+                    DefaultWriterProperties.SortingColumnsNullsFirst);
+            }
         }
 
         [MethodImpl(MethodImplOptions.AggressiveInlining)]
@@ -686,6 +772,9 @@ namespace ParquetSharp
         [DllImport(ParquetDll.Name)]
         private static extern IntPtr WriterPropertiesBuilder_Disable_Page_Checksum(IntPtr builder);
 
+        [DllImport(ParquetDll.Name)]
+        private static extern IntPtr WriterPropertiesBuilder_Sorting_Columns(IntPtr builder, IntPtr columnIndices, IntPtr isDescending, IntPtr nullsFirst, int numColumns);
+
         private readonly ParquetHandle _handle;
     }
 }
